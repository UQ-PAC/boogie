(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :produce-interpolants true)
(set-option :inline-size-limit 20000000)
; done setting options


(declare-fun c () (_ BitVec 8))
(declare-fun x () (_ BitVec 8))
(declare-fun y () (_ BitVec 8))
(push 1)
(assert  (and (not (bvult c #x08)) (not (=> (not (bvult c #x08)) (= x y)))))
(assert  (and (= y #x00) (= c #x00)))
(check-sat)
(get-interpolants)
(pop 1)
(declare-fun bit () (_ BitVec 8))
(declare-fun i () (_ BitVec 8))
(push 1)
(assert  (or (bvule #x08 c) (and (bvult c #x08) (=> (bvult c #x08) (and (=> (= (bvand x (bvshl #x01 c)) #x00) (bvule #x08 (bvadd c #x01))) (=> (not (= (bvand x (bvshl #x01 c)) #x00)) (bvule #x08 (bvadd c #x01))))))))
(assert  (or (and (= y #x00) (= c #x00)) (and (let ((a!1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x01) a!1) (not (= bit #x00))) (= y #x01)) (and (and (and (= y #x00) (= i #x01)) a!1) (= bit #x00)))) (= c #x01))))
(check-sat)
(get-interpolants)
(pop 1)
(push 1)
(assert  (or (bvule #x02 c) (and (bvult c #x08) (=> (bvult c #x08) (and (=> (= (bvand x (bvshl #x01 c)) #x00) (bvule #x02 (bvadd c #x01))) (=> (not (= (bvand x (bvshl #x01 c)) #x00)) (bvule #x02 (bvadd c #x01))))))))
(assert  (or (or (and (= y #x00) (= c #x00)) (and (let ((a!1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x01) a!1) (not (= bit #x00))) (= y #x01)) (and (and (and (= y #x00) (= i #x01)) a!1) (= bit #x00)))) (= c #x01))) (and (let ((a!3  (or (and (= ((_ extract 0 0) x) #b1) (= y #x01)) (and (= y #x00) (= ((_ extract 0 0) x) #b0)))))
(let ((a!2  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!1@@0 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x02) a!1@@0) (not (= bit #x00))) a!2) (and (and (and (= i #x02) a!1@@0) a!3) (= bit #x00)))))) (= c #x02))))
(check-sat)
(pop 1)
(push 1)
(assert  (or (and (not (bvult c #x08)) (not (=> (not (bvult c #x08)) (= x y)))) (and (bvult c #x08) (=> (bvult c #x08) (and (=> (= (bvand x (bvshl #x01 c)) #x00) (and (not (bvult (bvadd c #x01) #x08)) (not (=> (not (bvult (bvadd c #x01) #x08)) (= x y))))) (=> (not (= (bvand x (bvshl #x01 c)) #x00)) (and (not (bvult (bvadd c #x01) #x08)) (not (=> (not (bvult (bvadd c #x01) #x08)) (= x (bvadd y #x01)))))))))))
(assert  (or (or (and (= y #x00) (= c #x00)) (and (let ((a!1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x01) a!1) (not (= bit #x00))) (= y #x01)) (and (and (and (= y #x00) (= i #x01)) a!1) (= bit #x00)))) (= c #x01))) (and (let ((a!3  (or (and (= ((_ extract 0 0) x) #b1) (= y #x01)) (and (= y #x00) (= ((_ extract 0 0) x) #b0)))))
(let ((a!2  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!1@@0 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x02) a!1@@0) (not (= bit #x00))) a!2) (and (and (and (= i #x02) a!1@@0) a!3) (= bit #x00)))))) (= c #x02))))
(check-sat)
(get-interpolants)
(pop 1)
(push 1)
(assert  (or (bvule #x03 c) (and (bvult c #x08) (=> (bvult c #x08) (and (=> (= (bvand x (bvshl #x01 c)) #x00) (bvule #x03 (bvadd c #x01))) (=> (not (= (bvand x (bvshl #x01 c)) #x00)) (bvule #x03 (bvadd c #x01))))))))
(assert  (or (or (or (and (= y #x00) (= c #x00)) (and (let ((a!1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x01) a!1) (not (= bit #x00))) (= y #x01)) (and (and (and (= y #x00) (= i #x01)) a!1) (= bit #x00)))) (= c #x01))) (and (let ((a!3  (or (and (= ((_ extract 0 0) x) #b1) (= y #x01)) (and (= y #x00) (= ((_ extract 0 0) x) #b0)))))
(let ((a!2  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!1@@0 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x02) a!1@@0) (not (= bit #x00))) a!2) (and (and (and (= i #x02) a!1@@0) a!3) (= bit #x00)))))) (= c #x02))) (and (let ((a!5  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!4  (or (and (= y #x00) (= ((_ extract 0 0) x) #b0)) (and (= ((_ extract 0 0) x) #b1) (= y #x01)))))
(let ((a!2@@0  (or (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b1)) (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b0)))))
(let ((a!1@@1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
(let ((a!6  (or (and (= ((_ extract 1 1) x) #b0) a!4) (and (= ((_ extract 1 1) x) #b1) a!5))))
(let ((a!3@@0  (or (or (and a!2@@0 (= y #x02)) (and (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b1)) (= y #x03))) (and (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b0)) (= y #x01)))))
 (or (and (and (and (= i #x04) a!1@@1) (not (= bit #x00))) a!3@@0) (and (and (and (= i #x04) a!1@@1) a!6) (= bit #x00))))))))) (= c #x03))))
(check-sat)
(pop 1)
(push 1)
(assert  (or (and (not (bvult c #x08)) (not (=> (not (bvult c #x08)) (= x y)))) (and (bvult c #x08) (=> (bvult c #x08) (and (=> (= (bvand x (bvshl #x01 c)) #x00) (or (and (not (bvult (bvadd c #x01) #x08)) (not (=> (not (bvult (bvadd c #x01) #x08)) (= x y)))) (and (bvult (bvadd c #x01) #x08) (=> (bvult (bvadd c #x01) #x08) (and (=> (= (bvand x (bvshl #x01 (bvadd c #x01))) #x00) (and (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (= x y))))) (=> (not (= (bvand x (bvshl #x01 (bvadd c #x01))) #x00)) (and (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (= x (bvadd y #x01))))))))))) (=> (not (= (bvand x (bvshl #x01 c)) #x00)) (or (and (not (bvult (bvadd c #x01) #x08)) (not (=> (not (bvult (bvadd c #x01) #x08)) (= x (bvadd y #x01))))) (and (bvult (bvadd c #x01) #x08) (=> (bvult (bvadd c #x01) #x08) (and (=> (= (bvand x (bvshl #x01 (bvadd c #x01))) #x00) (and (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (= x (bvadd y #x01)))))) (=> (not (= (bvand x (bvshl #x01 (bvadd c #x01))) #x00)) (and (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (= x (bvadd (bvadd y #x01) #x01))))))))))))))))
(assert  (or (or (or (and (= y #x00) (= c #x00)) (and (let ((a!1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x01) a!1) (not (= bit #x00))) (= y #x01)) (and (and (and (= y #x00) (= i #x01)) a!1) (= bit #x00)))) (= c #x01))) (and (let ((a!3  (or (and (= ((_ extract 0 0) x) #b1) (= y #x01)) (and (= y #x00) (= ((_ extract 0 0) x) #b0)))))
(let ((a!2  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!1@@0 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x02) a!1@@0) (not (= bit #x00))) a!2) (and (and (and (= i #x02) a!1@@0) a!3) (= bit #x00)))))) (= c #x02))) (and (let ((a!5  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!4  (or (and (= y #x00) (= ((_ extract 0 0) x) #b0)) (and (= ((_ extract 0 0) x) #b1) (= y #x01)))))
(let ((a!2@@0  (or (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b1)) (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b0)))))
(let ((a!1@@1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
(let ((a!6  (or (and (= ((_ extract 1 1) x) #b0) a!4) (and (= ((_ extract 1 1) x) #b1) a!5))))
(let ((a!3@@0  (or (or (and a!2@@0 (= y #x02)) (and (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b1)) (= y #x03))) (and (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b0)) (= y #x01)))))
 (or (and (and (and (= i #x04) a!1@@1) (not (= bit #x00))) a!3@@0) (and (and (and (= i #x04) a!1@@1) a!6) (= bit #x00))))))))) (= c #x03))))
(check-sat)
(get-interpolants)
(pop 1)
(push 1)
(assert  (or (or (bvule #x08 c) (and (and (not (= c #x03)) (bvule #x01 c)) (or (bvule #x03 c) (or (and (= c #x02) (bvsle #b0001 (bvadd (bvmul #b1110 ((_ zero_extend 3) ((_ extract 1 1) x))) (bvneg ((_ zero_extend 3) ((_ extract 0 0) x)))))) (and (= c #x01) (bvsle ((_ zero_extend 1) ((_ extract 0 0) x)) #b11)))))) (and (bvult c #x08) (=> (bvult c #x08) (and (=> (= (bvand x (bvshl #x01 c)) #x00) (or (bvule #x08 (bvadd c #x01)) (and (and (not (= (bvadd c #x01) #x03)) (bvule #x01 (bvadd c #x01))) (or (bvule #x03 (bvadd c #x01)) (or (and (= (bvadd c #x01) #x02) (bvsle #b0001 (bvadd (bvmul #b1110 ((_ zero_extend 3) ((_ extract 1 1) x))) (bvneg ((_ zero_extend 3) ((_ extract 0 0) x)))))) (and (= (bvadd c #x01) #x01) (bvsle ((_ zero_extend 1) ((_ extract 0 0) x)) #b11))))))) (=> (not (= (bvand x (bvshl #x01 c)) #x00)) (or (bvule #x08 (bvadd c #x01)) (and (and (not (= (bvadd c #x01) #x03)) (bvule #x01 (bvadd c #x01))) (or (bvule #x03 (bvadd c #x01)) (or (and (= (bvadd c #x01) #x02) (bvsle #b0001 (bvadd (bvmul #b1110 ((_ zero_extend 3) ((_ extract 1 1) x))) (bvneg ((_ zero_extend 3) ((_ extract 0 0) x)))))) (and (= (bvadd c #x01) #x01) (bvsle ((_ zero_extend 1) ((_ extract 0 0) x)) #b11))))))))))))
(assert  (or (or (or (or (and (= y #x00) (= c #x00)) (and (let ((a!1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x01) a!1) (not (= bit #x00))) (= y #x01)) (and (and (and (= y #x00) (= i #x01)) a!1) (= bit #x00)))) (= c #x01))) (and (let ((a!3  (or (and (= ((_ extract 0 0) x) #b1) (= y #x01)) (and (= y #x00) (= ((_ extract 0 0) x) #b0)))))
(let ((a!2  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!1@@0 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x02) a!1@@0) (not (= bit #x00))) a!2) (and (and (and (= i #x02) a!1@@0) a!3) (= bit #x00)))))) (= c #x02))) (and (let ((a!5  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!4  (or (and (= y #x00) (= ((_ extract 0 0) x) #b0)) (and (= ((_ extract 0 0) x) #b1) (= y #x01)))))
(let ((a!2@@0  (or (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b1)) (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b0)))))
(let ((a!1@@1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
(let ((a!6  (or (and (= ((_ extract 1 1) x) #b0) a!4) (and (= ((_ extract 1 1) x) #b1) a!5))))
(let ((a!3@@0  (or (or (and a!2@@0 (= y #x02)) (and (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b1)) (= y #x03))) (and (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b0)) (= y #x01)))))
 (or (and (and (and (= i #x04) a!1@@1) (not (= bit #x00))) a!3@@0) (and (and (and (= i #x04) a!1@@1) a!6) (= bit #x00))))))))) (= c #x03))) (and (let ((a!7  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!6@@0  (or (and (= y #x00) (= ((_ extract 0 0) x) #b0)) (and (= ((_ extract 0 0) x) #b1) (= y #x01)))))
(let ((a!2@@1  (or (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b1)) (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b0)))))
(let ((a!1@@2 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
(let ((a!9  (or (or (and (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b1)) (= y #x03)) (and (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b0)) (= y #x01))) (and a!2@@1 (= y #x02)))))
(let ((a!8  (or (and (= ((_ extract 1 1) x) #b0) a!6@@0) (and (= ((_ extract 1 1) x) #b1) a!7))))
(let ((a!4@@0  (or (and (= ((_ extract 2 2) x) #b1) a!2@@1) (and (and (= ((_ extract 2 2) x) #b0) (= ((_ extract 1 1) x) #b1)) (= ((_ extract 0 0) x) #b1)))))
(let ((a!3@@1  (or (and (and (= ((_ extract 2 2) x) #b1) (= ((_ extract 1 1) x) #b0)) (= ((_ extract 0 0) x) #b0)) (and (= ((_ extract 2 2) x) #b0) a!2@@1))))
(let ((a!10  (or (and (= ((_ extract 2 2) x) #b0) a!8) (and (= ((_ extract 2 2) x) #b1) a!9))))
(let ((a!5@@0  (or (or (or (and (and (and (= ((_ extract 2 2) x) #b0) (= ((_ extract 1 1) x) #b0)) (= ((_ extract 0 0) x) #b0)) (= y #x01)) (and a!3@@1 (= y #x02))) (and a!4@@0 (= y #x03))) (and (and (and (= ((_ extract 2 2) x) #b1) (= ((_ extract 1 1) x) #b1)) (= ((_ extract 0 0) x) #b1)) (= y #x04)))))
 (or (and (and (and (= i #x08) a!1@@2) (not (= bit #x00))) a!5@@0) (and (and (and (= i #x08) a!1@@2) a!10) (= bit #x00))))))))))))) (= c #x04))))
(check-sat)
(pop 1)
(push 1)
(assert  (or (and (not (bvult c #x08)) (not (=> (not (bvult c #x08)) (= x y)))) (and (bvult c #x08) (=> (bvult c #x08) (and (=> (= (bvand x (bvshl #x01 c)) #x00) (or (and (not (bvult (bvadd c #x01) #x08)) (not (=> (not (bvult (bvadd c #x01) #x08)) (= x y)))) (and (bvult (bvadd c #x01) #x08) (=> (bvult (bvadd c #x01) #x08) (and (=> (= (bvand x (bvshl #x01 (bvadd c #x01))) #x00) (or (and (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (= x y)))) (and (bvult (bvadd (bvadd c #x01) #x01) #x08) (=> (bvult (bvadd (bvadd c #x01) #x01) #x08) (and (=> (= (bvand x (bvshl #x01 (bvadd (bvadd c #x01) #x01))) #x00) (and (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (= x y))))) (=> (not (= (bvand x (bvshl #x01 (bvadd (bvadd c #x01) #x01))) #x00)) (and (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (= x (bvadd y #x01))))))))))) (=> (not (= (bvand x (bvshl #x01 (bvadd c #x01))) #x00)) (or (and (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (= x (bvadd y #x01))))) (and (bvult (bvadd (bvadd c #x01) #x01) #x08) (=> (bvult (bvadd (bvadd c #x01) #x01) #x08) (and (=> (= (bvand x (bvshl #x01 (bvadd (bvadd c #x01) #x01))) #x00) (and (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (= x (bvadd y #x01)))))) (=> (not (= (bvand x (bvshl #x01 (bvadd (bvadd c #x01) #x01))) #x00)) (and (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (= x (bvadd (bvadd y #x01) #x01)))))))))))))))) (=> (not (= (bvand x (bvshl #x01 c)) #x00)) (or (and (not (bvult (bvadd c #x01) #x08)) (not (=> (not (bvult (bvadd c #x01) #x08)) (= x (bvadd y #x01))))) (and (bvult (bvadd c #x01) #x08) (=> (bvult (bvadd c #x01) #x08) (and (=> (= (bvand x (bvshl #x01 (bvadd c #x01))) #x00) (or (and (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (= x (bvadd y #x01))))) (and (bvult (bvadd (bvadd c #x01) #x01) #x08) (=> (bvult (bvadd (bvadd c #x01) #x01) #x08) (and (=> (= (bvand x (bvshl #x01 (bvadd (bvadd c #x01) #x01))) #x00) (and (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (= x (bvadd y #x01)))))) (=> (not (= (bvand x (bvshl #x01 (bvadd (bvadd c #x01) #x01))) #x00)) (and (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (= x (bvadd (bvadd y #x01) #x01))))))))))) (=> (not (= (bvand x (bvshl #x01 (bvadd c #x01))) #x00)) (or (and (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd c #x01) #x01) #x08)) (= x (bvadd (bvadd y #x01) #x01))))) (and (bvult (bvadd (bvadd c #x01) #x01) #x08) (=> (bvult (bvadd (bvadd c #x01) #x01) #x08) (and (=> (= (bvand x (bvshl #x01 (bvadd (bvadd c #x01) #x01))) #x00) (and (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (= x (bvadd (bvadd y #x01) #x01)))))) (=> (not (= (bvand x (bvshl #x01 (bvadd (bvadd c #x01) #x01))) #x00)) (and (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (not (=> (not (bvult (bvadd (bvadd (bvadd c #x01) #x01) #x01) #x08)) (= x (bvadd (bvadd (bvadd y #x01) #x01) #x01)))))))))))))))))))))
(assert  (or (or (or (or (and (= y #x00) (= c #x00)) (and (let ((a!1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x01) a!1) (not (= bit #x00))) (= y #x01)) (and (and (and (= y #x00) (= i #x01)) a!1) (= bit #x00)))) (= c #x01))) (and (let ((a!3  (or (and (= ((_ extract 0 0) x) #b1) (= y #x01)) (and (= y #x00) (= ((_ extract 0 0) x) #b0)))))
(let ((a!2  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!1@@0 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
 (or (and (and (and (= i #x02) a!1@@0) (not (= bit #x00))) a!2) (and (and (and (= i #x02) a!1@@0) a!3) (= bit #x00)))))) (= c #x02))) (and (let ((a!5  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!4  (or (and (= y #x00) (= ((_ extract 0 0) x) #b0)) (and (= ((_ extract 0 0) x) #b1) (= y #x01)))))
(let ((a!2@@0  (or (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b1)) (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b0)))))
(let ((a!1@@1 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
(let ((a!6  (or (and (= ((_ extract 1 1) x) #b0) a!4) (and (= ((_ extract 1 1) x) #b1) a!5))))
(let ((a!3@@0  (or (or (and a!2@@0 (= y #x02)) (and (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b1)) (= y #x03))) (and (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b0)) (= y #x01)))))
 (or (and (and (and (= i #x04) a!1@@1) (not (= bit #x00))) a!3@@0) (and (and (and (= i #x04) a!1@@1) a!6) (= bit #x00))))))))) (= c #x03))) (and (let ((a!7  (or (and (= ((_ extract 0 0) x) #b0) (= y #x01)) (and (= ((_ extract 0 0) x) #b1) (= y #x02)))))
(let ((a!6@@0  (or (and (= y #x00) (= ((_ extract 0 0) x) #b0)) (and (= ((_ extract 0 0) x) #b1) (= y #x01)))))
(let ((a!2@@1  (or (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b1)) (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b0)))))
(let ((a!1@@2 (= bit (bvnot (bvor (bvnot x) (bvnot i))))))
(let ((a!9  (or (or (and (and (= ((_ extract 1 1) x) #b1) (= ((_ extract 0 0) x) #b1)) (= y #x03)) (and (and (= ((_ extract 1 1) x) #b0) (= ((_ extract 0 0) x) #b0)) (= y #x01))) (and a!2@@1 (= y #x02)))))
(let ((a!8  (or (and (= ((_ extract 1 1) x) #b0) a!6@@0) (and (= ((_ extract 1 1) x) #b1) a!7))))
(let ((a!4@@0  (or (and (= ((_ extract 2 2) x) #b1) a!2@@1) (and (and (= ((_ extract 2 2) x) #b0) (= ((_ extract 1 1) x) #b1)) (= ((_ extract 0 0) x) #b1)))))
(let ((a!3@@1  (or (and (and (= ((_ extract 2 2) x) #b1) (= ((_ extract 1 1) x) #b0)) (= ((_ extract 0 0) x) #b0)) (and (= ((_ extract 2 2) x) #b0) a!2@@1))))
(let ((a!10  (or (and (= ((_ extract 2 2) x) #b0) a!8) (and (= ((_ extract 2 2) x) #b1) a!9))))
(let ((a!5@@0  (or (or (or (and (and (and (= ((_ extract 2 2) x) #b0) (= ((_ extract 1 1) x) #b0)) (= ((_ extract 0 0) x) #b0)) (= y #x01)) (and a!3@@1 (= y #x02))) (and a!4@@0 (= y #x03))) (and (and (and (= ((_ extract 2 2) x) #b1) (= ((_ extract 1 1) x) #b1)) (= ((_ extract 0 0) x) #b1)) (= y #x04)))))
 (or (and (and (and (= i #x08) a!1@@2) (not (= bit #x00))) a!5@@0) (and (and (and (= i #x08) a!1@@2) a!10) (= bit #x00))))))))))))) (= c #x04))))
(check-sat)
(get-interpolants)
(pop 1)

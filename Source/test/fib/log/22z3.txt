(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun z () Int)
(declare-fun k () Int)
(declare-fun call0formal@u () Bool)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (and (= x y) (= y z)))) u) u) (or (=> (not (= (mod k 3) 0)) (forall ((call0formal@u@@0 Bool) )  (not (not (and (= x (+ y 1)) (= (+ y 1) (+ z 1))))))) (=> (= (mod k 3) 0) (forall ((call0formal@u@@1 Bool) )  (not (not (and (= (+ x 1) (+ y 1)) (= (+ y 1) (+ z 1)))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (and (= x y) (= y z)))) (not u)) (not u)) (and (= x y) (= y z)))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (and (= x 0) (= y 0)) (= z 0)) (= k 0)) (= u call0formal@u)) (not (not (and (= x y) (= y z)))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (not (and (= x y) (= y z)))) (not u)))
))
(check-sat)
(pop 1)

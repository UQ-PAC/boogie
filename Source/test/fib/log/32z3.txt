(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun n () Int)
(declare-fun k () Int)
(declare-fun i () Int)
(declare-fun j () Int)
(declare-fun b () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (= i j))) (< n (* 2 k))) (< n (* 2 k))) (and (=> (not (= b 1)) (not (not (= i (+ j 1))))) (=> (= b 1) (not (not (= (+ i 1) j))))))
))
(check-sat)
(pop 1)
(declare-fun |i'| () Int)
(declare-fun |n'| () Int)
(declare-fun |b'| () Int)
(declare-fun |j'| () Int)
(declare-fun |b'@@0| () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (or (and (<= 0 (+ n (* (- 0 2) k))) (not (= i j))) (and (not (and (and (not (= b 1)) (= 1 (+ i (* (- 0 1) j)))) (not (and (<= 0 (+ n (* (- 0 2) k))) (not (= i j)))))) (and (<= (- 0 1) (+ n (* (- 0 2) k))) (not (and (not (and (<= 0 (+ n (* (- 0 2) k))) (not (= i j)))) (and (= b 1) (and (not (<= j i)) (not (<= (+ i (* (- 0 1) j)) (- 0 2))))))))))) (< n (* 2 k))) (< n (* 2 k))) (and (=> (not (= b 1)) (not (or (and (<= 0 (+ (+ n 1) (* (- 0 2) k))) (not (= i (+ j 1)))) (and (not (and (and (not (= 1 1)) (= 1 (+ i (* (- 0 1) (+ j 1))))) (not (and (<= 0 (+ (+ n 1) (* (- 0 2) k))) (not (= i (+ j 1))))))) (and (<= (- 0 1) (+ (+ n 1) (* (- 0 2) k))) (not (and (not (and (<= 0 (+ (+ n 1) (* (- 0 2) k))) (not (= i (+ j 1))))) (and (= 1 1) (and (not (<= (+ j 1) i)) (not (<= (+ i (* (- 0 1) (+ j 1))) (- 0 2)))))))))))) (=> (= b 1) (not (or (and (<= 0 (+ (+ n 1) (* (- 0 2) k))) (not (= (+ i 1) j))) (and (not (and (and (not (= 0 1)) (= 1 (+ (+ i 1) (* (- 0 1) j)))) (not (and (<= 0 (+ (+ n 1) (* (- 0 2) k))) (not (= (+ i 1) j)))))) (and (<= (- 0 1) (+ (+ n 1) (* (- 0 2) k))) (not (and (not (and (<= 0 (+ (+ n 1) (* (- 0 2) k))) (not (= (+ i 1) j)))) (and (= 0 1) (and (not (<= j (+ i 1))) (not (<= (+ (+ i 1) (* (- 0 1) j)) (- 0 2))))))))))))))
))
(check-sat)
(pop 1)
(declare-fun |i'@@0| () Int)
(declare-fun |b'@@1| () Int)
(declare-fun |n'@@0| () Int)
(declare-fun |j'@@0| () Int)
(declare-fun |b'@@2| () Int)

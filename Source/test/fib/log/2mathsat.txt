(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun u () Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun i () Int)
(declare-fun j () Int)
(declare-fun z () Int)
(declare-fun w () Int)
(push 1)
(define-fun A () Bool  (and (not u) (not (=> (not u) (= x y)))))
(define-fun B () Bool  (and (and (and (and (and (= i 1) (= j 0)) (= z (- i j))) (= x 0)) (= y 0)) (= w 0)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |z'| () Int)
(declare-fun |x'| () Int)
(declare-fun |y'| () Int)
(declare-fun |w'| () Int)
(push 1)
(define-fun A () Bool  (or (not (= x y)) (and u (=> u (and (=> (not (= (mod (+ (+ (+ z x) y) w) 2) 1)) (not (= x (+ y 1)))) (=> (= (mod (+ (+ (+ z x) y) w) 2) 1) (not (= (+ x 1) (+ y 1)))))))))
(define-fun B () Bool  (or (and (and (and (and (and (= i 1) (= j 0)) (= z (- i j))) (= x 0)) (= y 0)) (= w 0)) (and (or (and (and (and (and (and (and (and (and (and (and (and (= i 1) (= j 0)) (= |z'| (- i j))) (= |x'| 0)) (= |y'| 0)) (= |w'| 0)) u) u) (= z (+ (+ (+ |z'| |x'|) |y'|) |w'|))) (= y (+ |y'| 1))) (= (mod z 2) 1)) (= x (+ |x'| 1))) (and (and (and (and (and (and (and (and (and (and (= i 1) (= j 0)) (= |z'| (- i j))) (= x 0)) (= |y'| 0)) (= |w'| 0)) u) u) (= z (+ (+ (+ |z'| x) |y'|) |w'|))) (= y (+ |y'| 1))) (not (= (mod z 2) 1)))) (= w (+ |w'| 2)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |z'@@0| () Int)
(declare-fun |y'@@0| () Int)
(declare-fun |x'@@0| () Int)
(declare-fun |w'@@0| () Int)
(push 1)
(define-fun A () Bool  (or (and (not (and (= x y) (not (<= (+ z (+ w (* (- 0 2) (to_int (* (/ 1 2) (to_real (+ (* 1 w) (* 1 z)))))))) 0)))) (not (and (and (not (<= 1 (+ x (* (- 0 1) y)))) (not (<= (+ x (* (- 0 1) y)) (- 0 1)))) (not (<= (+ (* 2 x) (+ z (+ w (* (- 0 2) (to_int (* (/ 1 2) (to_real (+ (+ (+ (* 1 w) (* 1 z)) (* 1 y)) (* 1 x))))))))) 0))))) (and u (=> u (and (=> (not (= (mod (+ (+ (+ z x) y) w) 2) 1)) (and (not (and (= x (+ y 1)) (not (<= (+ (+ (+ (+ z x) y) w) (+ (+ w 2) (* (- 0 2) (to_int (* (/ 1 2) (to_real (+ (* 1 (+ w 2)) (* 1 (+ (+ (+ z x) y) w))))))))) 0)))) (not (and (and (not (<= 1 (+ x (* (- 0 1) (+ y 1))))) (not (<= (+ x (* (- 0 1) (+ y 1))) (- 0 1)))) (not (<= (+ (* 2 x) (+ (+ (+ (+ z x) y) w) (+ (+ w 2) (* (- 0 2) (to_int (* (/ 1 2) (to_real (+ (+ (+ (* 1 (+ w 2)) (* 1 (+ (+ (+ z x) y) w))) (* 1 (+ y 1))) (* 1 x))))))))) 0)))))) (=> (= (mod (+ (+ (+ z x) y) w) 2) 1) (and (not (and (= (+ x 1) (+ y 1)) (not (<= (+ (+ (+ (+ z x) y) w) (+ (+ w 2) (* (- 0 2) (to_int (* (/ 1 2) (to_real (+ (* 1 (+ w 2)) (* 1 (+ (+ (+ z x) y) w))))))))) 0)))) (not (and (and (not (<= 1 (+ (+ x 1) (* (- 0 1) (+ y 1))))) (not (<= (+ (+ x 1) (* (- 0 1) (+ y 1))) (- 0 1)))) (not (<= (+ (* 2 (+ x 1)) (+ (+ (+ (+ z x) y) w) (+ (+ w 2) (* (- 0 2) (to_int (* (/ 1 2) (to_real (+ (+ (+ (* 1 (+ w 2)) (* 1 (+ (+ (+ z x) y) w))) (* 1 (+ y 1))) (* 1 (+ x 1)))))))))) 0)))))))))))
(define-fun B () Bool  (or (or (and (and (and (and (and (= i 1) (= j 0)) (= z (- i j))) (= x 0)) (= y 0)) (= w 0)) (and (or (and (and (and (and (and (and (and (and (and (and (and (= i 1) (= j 0)) (= |z'| (- i j))) (= |x'| 0)) (= |y'| 0)) (= |w'| 0)) u) u) (= z (+ (+ (+ |z'| |x'|) |y'|) |w'|))) (= y (+ |y'| 1))) (= (mod z 2) 1)) (= x (+ |x'| 1))) (and (and (and (and (and (and (and (and (and (and (= i 1) (= j 0)) (= |z'| (- i j))) (= x 0)) (= |y'| 0)) (= |w'| 0)) u) u) (= z (+ (+ (+ |z'| x) |y'|) |w'|))) (= y (+ |y'| 1))) (not (= (mod z 2) 1)))) (= w (+ |w'| 2)))) (and (or (and (and (and (and (and (and (and (or (and (and (and (and (and (and (and (and (and (and (and (= i 1) (= j 0)) (= |z'| (- i j))) (= |x'| 0)) (= |y'| 0)) (= |w'| 0)) u) u) (= |z'@@0| (+ (+ (+ |z'| |x'|) |y'|) |w'|))) (= |y'@@0| (+ |y'| 1))) (= (mod |z'@@0| 2) 1)) (= |x'@@0| (+ |x'| 1))) (and (and (and (and (and (and (and (and (and (and (= i 1) (= j 0)) (= |z'| (- i j))) (= |x'@@0| 0)) (= |y'| 0)) (= |w'| 0)) u) u) (= |z'@@0| (+ (+ (+ |z'| |x'@@0|) |y'|) |w'|))) (= |y'@@0| (+ |y'| 1))) (not (= (mod |z'@@0| 2) 1)))) (= |w'@@0| (+ |w'| 2))) u) u) (= z (+ (+ (+ |z'@@0| |x'@@0|) |y'@@0|) |w'@@0|))) (= y (+ |y'@@0| 1))) (= (mod z 2) 1)) (= x (+ |x'@@0| 1))) (and (and (and (and (and (and (or (and (and (and (and (and (and (and (and (and (and (and (= i 1) (= j 0)) (= |z'| (- i j))) (= |x'| 0)) (= |y'| 0)) (= |w'| 0)) u) u) (= |z'@@0| (+ (+ (+ |z'| |x'|) |y'|) |w'|))) (= |y'@@0| (+ |y'| 1))) (= (mod |z'@@0| 2) 1)) (= x (+ |x'| 1))) (and (and (and (and (and (and (and (and (and (and (= i 1) (= j 0)) (= |z'| (- i j))) (= x 0)) (= |y'| 0)) (= |w'| 0)) u) u) (= |z'@@0| (+ (+ (+ |z'| x) |y'|) |w'|))) (= |y'@@0| (+ |y'| 1))) (not (= (mod |z'@@0| 2) 1)))) (= |w'@@0| (+ |w'| 2))) u) u) (= z (+ (+ (+ |z'@@0| x) |y'@@0|) |w'@@0|))) (= y (+ |y'@@0| 1))) (not (= (mod z 2) 1)))) (= w (+ |w'@@0| 2)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

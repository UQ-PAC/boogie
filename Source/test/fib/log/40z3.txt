(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun turn () Int)
(declare-fun flag () Int)
(declare-fun a () Int)
(declare-fun b () Int)
(declare-fun j () Int)
(declare-fun i () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (= turn 0))) (not (= turn 4))) (not (= turn 4))) (or (=> (not (= turn 0)) (or (=> (not (= turn 1)) (or (=> (not (= turn 2)) (or (=> (not (= turn 3)) (not (not (= turn 0)))) (=> (= turn 3) (forall ((call0formal@u Bool) )  (or (=> (not call0formal@u) (not (not (= 4 0)))) (=> call0formal@u (not (not (= 3 0))))))))) (=> (= turn 2) (not (not (= 3 0)))))) (=> (= turn 1) (or (=> (not (= (mod (+ i 2) 2) 0)) (forall ((call0formal@u@@0 Bool) )  (or (=> (not call0formal@u@@0) (not (not (= 2 0)))) (=> call0formal@u@@0 (not (not (= 1 0))))))) (=> (= (mod (+ i 2) 2) 0) (forall ((call0formal@u@@1 Bool) )  (or (=> (not call0formal@u@@1) (not (not (= 2 0)))) (=> call0formal@u@@1 (not (not (= 1 0))))))))))) (=> (= turn 0) (forall ((call0formal@u@@2 Bool) )  (or (=> (not call0formal@u@@2) (or (=> (not (= 2 1)) (or (=> (not (= 2 2)) (or (=> (not (= 2 3)) (not (not (= 2 0)))) (=> (= 2 3) (forall ((call0formal@u@@3 Bool) )  (or (=> (not call0formal@u@@3) (not (not (= 4 0)))) (=> call0formal@u@@3 (not (not (= 3 0))))))))) (=> (= 2 2) (not (not (= 3 0)))))) (=> (= 2 1) (or (=> (not (= (mod (+ i 2) 2) 0)) (forall ((call0formal@u@@4 Bool) )  (or (=> (not call0formal@u@@4) (not (not (= 2 0)))) (=> call0formal@u@@4 (not (not (= 1 0))))))) (=> (= (mod (+ i 2) 2) 0) (forall ((call0formal@u@@5 Bool) )  (or (=> (not call0formal@u@@5) (not (not (= 2 0)))) (=> call0formal@u@@5 (not (not (= 1 0))))))))))) (=> call0formal@u@@2 (or (=> (not (= 1 1)) (or (=> (not (= 1 2)) (or (=> (not (= 1 3)) (not (not (= 1 0)))) (=> (= 1 3) (forall ((call0formal@u@@6 Bool) )  (or (=> (not call0formal@u@@6) (not (not (= 4 0)))) (=> call0formal@u@@6 (not (not (= 3 0))))))))) (=> (= 1 2) (not (not (= 3 0)))))) (=> (= 1 1) (or (=> (not (= (mod (+ i 2) 2) 0)) (forall ((call0formal@u@@7 Bool) )  (or (=> (not call0formal@u@@7) (not (not (= 2 0)))) (=> call0formal@u@@7 (not (not (= 1 0))))))) (=> (= (mod (+ i 2) 2) 0) (forall ((call0formal@u@@8 Bool) )  (or (=> (not call0formal@u@@8) (not (not (= 2 0)))) (=> call0formal@u@@8 (not (not (= 1 0))))))))))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (= turn 0))) (not (not (= turn 4)))) (= turn 4)) (or (<= flag 0) (= a b)))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (= j 1) (or (and (> flag 0) (= i 0)) (and (<= flag 0) (= i 1)))) (= turn 0)) (not (not (= turn 0))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (not (= turn 0))) (not (not (= turn 4)))))
))
(check-sat)
(pop 1)

(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun u () Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun w () Int)
(declare-fun z () Int)
(declare-fun turn () Int)
(push 1)
(define-fun A () Bool  (and (not u) (not (=> (not u) (= x y)))))
(define-fun B () Bool  (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= turn 0)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |w'| () Int)
(declare-fun |z'| () Int)
(declare-fun |x'| () Int)
(declare-fun |y'| () Int)
(declare-fun |turn'| () Int)
(declare-fun |turn'@@0| () Int)
(declare-fun |turn'@@1| () Int)
(declare-fun |turn'@@2| () Int)
(declare-fun |turn'@@3| () Int)
(declare-fun |turn'@@4| () Int)
(push 1)
(define-fun A () Bool  (or (not (= x y)) (and u (=> u (and (=> (not (= turn 0)) (and (=> (not (= turn 1)) (and (=> (not (= turn 2)) (not (= x y))) (=> (= turn 2) (and (not (= x y)) (not (= x y)))))) (=> (= turn 1) (and (=> (not (= (mod w 2) 1)) (and (=> (not (= (mod z 2) 0)) (and (and (=> (not (= 2 2)) (not (= x y))) (=> (= 2 2) (and (not (= x y)) (not (= x y))))) (and (=> (not (= 1 2)) (not (= x y))) (=> (= 1 2) (and (not (= x y)) (not (= x y))))))) (=> (= (mod z 2) 0) (and (and (=> (not (= 2 2)) (not (= x (+ y 1)))) (=> (= 2 2) (and (not (= x (+ y 1))) (not (= x (+ y 1)))))) (and (=> (not (= 1 2)) (not (= x (+ y 1)))) (=> (= 1 2) (and (not (= x (+ y 1))) (not (= x (+ y 1)))))))))) (=> (= (mod w 2) 1) (and (=> (not (= (mod z 2) 0)) (and (and (=> (not (= 2 2)) (not (= (+ x 1) y))) (=> (= 2 2) (and (not (= (+ x 1) y)) (not (= (+ x 1) y))))) (and (=> (not (= 1 2)) (not (= (+ x 1) y))) (=> (= 1 2) (and (not (= (+ x 1) y)) (not (= (+ x 1) y))))))) (=> (= (mod z 2) 0) (and (and (=> (not (= 2 2)) (not (= (+ x 1) (+ y 1)))) (=> (= 2 2) (and (not (= (+ x 1) (+ y 1))) (not (= (+ x 1) (+ y 1)))))) (and (=> (not (= 1 2)) (not (= (+ x 1) (+ y 1)))) (=> (= 1 2) (and (not (= (+ x 1) (+ y 1))) (not (= (+ x 1) (+ y 1)))))))))))))) (=> (= turn 0) (and (and (=> (not (= 2 1)) (and (=> (not (= 2 2)) (not (= x y))) (=> (= 2 2) (and (not (= x y)) (not (= x y)))))) (=> (= 2 1) (and (=> (not (= (mod w 2) 1)) (and (=> (not (= (mod z 2) 0)) (and (and (=> (not (= 2 2)) (not (= x y))) (=> (= 2 2) (and (not (= x y)) (not (= x y))))) (and (=> (not (= 1 2)) (not (= x y))) (=> (= 1 2) (and (not (= x y)) (not (= x y))))))) (=> (= (mod z 2) 0) (and (and (=> (not (= 2 2)) (not (= x (+ y 1)))) (=> (= 2 2) (and (not (= x (+ y 1))) (not (= x (+ y 1)))))) (and (=> (not (= 1 2)) (not (= x (+ y 1)))) (=> (= 1 2) (and (not (= x (+ y 1))) (not (= x (+ y 1)))))))))) (=> (= (mod w 2) 1) (and (=> (not (= (mod z 2) 0)) (and (and (=> (not (= 2 2)) (not (= (+ x 1) y))) (=> (= 2 2) (and (not (= (+ x 1) y)) (not (= (+ x 1) y))))) (and (=> (not (= 1 2)) (not (= (+ x 1) y))) (=> (= 1 2) (and (not (= (+ x 1) y)) (not (= (+ x 1) y))))))) (=> (= (mod z 2) 0) (and (and (=> (not (= 2 2)) (not (= (+ x 1) (+ y 1)))) (=> (= 2 2) (and (not (= (+ x 1) (+ y 1))) (not (= (+ x 1) (+ y 1)))))) (and (=> (not (= 1 2)) (not (= (+ x 1) (+ y 1)))) (=> (= 1 2) (and (not (= (+ x 1) (+ y 1))) (not (= (+ x 1) (+ y 1))))))))))))) (and (=> (not (= 1 1)) (and (=> (not (= 1 2)) (not (= x y))) (=> (= 1 2) (and (not (= x y)) (not (= x y)))))) (=> (= 1 1) (and (=> (not (= (mod w 2) 1)) (and (=> (not (= (mod z 2) 0)) (and (and (=> (not (= 2 2)) (not (= x y))) (=> (= 2 2) (and (not (= x y)) (not (= x y))))) (and (=> (not (= 1 2)) (not (= x y))) (=> (= 1 2) (and (not (= x y)) (not (= x y))))))) (=> (= (mod z 2) 0) (and (and (=> (not (= 2 2)) (not (= x (+ y 1)))) (=> (= 2 2) (and (not (= x (+ y 1))) (not (= x (+ y 1)))))) (and (=> (not (= 1 2)) (not (= x (+ y 1)))) (=> (= 1 2) (and (not (= x (+ y 1))) (not (= x (+ y 1)))))))))) (=> (= (mod w 2) 1) (and (=> (not (= (mod z 2) 0)) (and (and (=> (not (= 2 2)) (not (= (+ x 1) y))) (=> (= 2 2) (and (not (= (+ x 1) y)) (not (= (+ x 1) y))))) (and (=> (not (= 1 2)) (not (= (+ x 1) y))) (=> (= 1 2) (and (not (= (+ x 1) y)) (not (= (+ x 1) y))))))) (=> (= (mod z 2) 0) (and (and (=> (not (= 2 2)) (not (= (+ x 1) (+ y 1)))) (=> (= 2 2) (and (not (= (+ x 1) (+ y 1))) (not (= (+ x 1) (+ y 1)))))) (and (=> (not (= 1 2)) (not (= (+ x 1) (+ y 1)))) (=> (= 1 2) (and (not (= (+ x 1) (+ y 1))) (not (= (+ x 1) (+ y 1))))))))))))))))))))
(define-fun B () Bool  (or (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= turn 0)) (or (and (and (and (and (or (and (or (and (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (= (mod |w'| 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (not (= (mod |w'| 2) 1)))) (= (mod |z'| 2) 0)) (= y (+ |y'| 1))) (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (= (mod |w'| 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (not (= (mod |w'| 2) 1)))) (not (= (mod |z'| 2) 0)))) (= |turn'@@2| 1)) (or (and (or (and (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (= (mod |w'| 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (not (= (mod |w'| 2) 1)))) (= (mod |z'| 2) 0)) (= y (+ |y'| 1))) (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (= (mod |w'| 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (not (= (mod |w'| 2) 1)))) (not (= (mod |z'| 2) 0)))) (= |turn'@@2| 2)) (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@2| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@2| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@2| 0)) u) u) (not (= |turn'@@2| 0))))) (not (= |turn'@@2| 1))))) (= |turn'@@2| 2)) (= z (+ x y))) (= w (+ z 1))) (= turn 2)) (or (and (and (and (and (or (and (or (and (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (= (mod |w'| 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (not (= (mod |w'| 2) 1)))) (= (mod |z'| 2) 0)) (= y (+ |y'| 1))) (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (= (mod |w'| 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (not (= (mod |w'| 2) 1)))) (not (= (mod |z'| 2) 0)))) (= |turn'@@4| 1)) (or (and (or (and (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (= (mod |w'| 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= |y'| 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (not (= (mod |w'| 2) 1)))) (= (mod |z'| 2) 0)) (= y (+ |y'| 1))) (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= |x'| 0)) (= y 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (= (mod |w'| 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (not (= (mod |w'| 2) 1)))) (not (= (mod |z'| 2) 0)))) (= |turn'@@4| 2)) (and (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@4| 1)) (or (and (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@4| 2)) (and (and (and (and (and (and (and (= |w'| 1) (= |z'| 0)) (= x 0)) (= y 0)) (= |turn'@@4| 0)) u) u) (not (= |turn'@@4| 0))))) (not (= |turn'@@4| 1))))) (= |turn'@@4| 2)) (= z (+ x y))) (= w (+ z 1))) (= turn 0)) (and (or (and (or (and (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (= (mod w 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= |y'| 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (not (= (mod w 2) 1)))) (= (mod z 2) 0)) (= y (+ |y'| 1))) (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= y 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (= (mod w 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@0| 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@0| 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= |turn'@@0| 0)) u) u) (not (= |turn'@@0| 0))))) (= |turn'@@0| 1)) (not (= (mod w 2) 1)))) (not (= (mod z 2) 0)))) (= turn 1)) (or (and (or (and (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= |y'| 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (= (mod w 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= |y'| 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= |y'| 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= |y'| 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (not (= (mod w 2) 1)))) (= (mod z 2) 0)) (= y (+ |y'| 1))) (and (or (and (and (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= |x'| 0)) (= y 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (= (mod w 2) 1)) (= x (+ |x'| 1))) (and (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= |turn'@@3| 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= |turn'@@3| 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= |turn'@@3| 0)) u) u) (not (= |turn'@@3| 0))))) (= |turn'@@3| 1)) (not (= (mod w 2) 1)))) (not (= (mod z 2) 0)))) (= turn 2)) (and (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= |turn'| 0)) u) u) (= |turn'| 0)) (= turn 1)) (or (and (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= |turn'@@1| 0)) u) u) (= |turn'@@1| 0)) (= turn 2)) (and (and (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= turn 0)) u) u) (not (= turn 0))))) (not (= turn 1))))) (not (= turn 2)))))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

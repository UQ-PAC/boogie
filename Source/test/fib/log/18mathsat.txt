(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun b () Int)
(declare-fun n () Int)
(declare-fun flag () Int)
(declare-fun j () Int)
(push 1)
(define-fun A () Bool  (and (not (< b n)) (not (=> (<= n b) (or (not (= flag 1)) (= j n))))))
(define-fun B () Bool  (and (and (= j 0) (> n 0)) (= b 0)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |j'| () Int)
(declare-fun |b'| () Int)
(push 1)
(define-fun A () Bool  (or (<= n b) (and (< b n) (=> (< b n) (and (=> (not (= flag 1)) (<= n (+ b 1))) (=> (= flag 1) (<= n (+ b 1))))))))
(define-fun B () Bool  (or (and (and (= j 0) (> n 0)) (= b 0)) (and (or (and (and (and (and (and (and (= |j'| 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (= flag 1)) (= j (+ |j'| 1))) (and (and (and (and (and (= j 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (not (= flag 1)))) (= b (+ |b'| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(pop 1)
(push 1)
(define-fun A () Bool  (or (and (not (< b n)) (not (=> (<= n b) (or (not (= flag 1)) (= j n))))) (and (< b n) (=> (< b n) (and (=> (not (= flag 1)) (and (not (< (+ b 1) n)) (not (=> (<= n (+ b 1)) (or (not (= flag 1)) (= j n)))))) (=> (= flag 1) (and (not (< (+ b 1) n)) (not (=> (<= n (+ b 1)) (or (not (= flag 1)) (= (+ j 1) n)))))))))))
(define-fun B () Bool  (or (and (and (= j 0) (> n 0)) (= b 0)) (and (or (and (and (and (and (and (and (= |j'| 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (= flag 1)) (= j (+ |j'| 1))) (and (and (and (and (and (= j 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (not (= flag 1)))) (= b (+ |b'| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |j'@@0| () Int)
(declare-fun |b'@@0| () Int)
(push 1)
(define-fun A () Bool  (or (or (and (= flag 1) (not (and (not (and (<= n b) (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) j)))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) j)))) (or (<= n j) (<= 1 (+ b (* (- 0 1) j)))))))))) (and (= flag 1) (and (and (or (<= n j) (<= 1 (+ b (* (- 0 1) j)))) (<= (+ b (* (- 0 1) j)) (- 0 1))) (or (= flag 1) (and (= flag 1) (not (and (not (and (<= n b) (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) j)))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) j)))) (or (<= n j) (<= 1 (+ b (* (- 0 1) j)))))))))))))) (and (< b n) (=> (< b n) (and (=> (not (= flag 1)) (or (and (= flag 1) (not (and (not (and (<= n (+ b 1)) (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) j)))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) j)))) (or (<= n j) (<= 1 (+ (+ b 1) (* (- 0 1) j)))))))))) (and (= flag 1) (and (and (or (<= n j) (<= 1 (+ (+ b 1) (* (- 0 1) j)))) (<= (+ (+ b 1) (* (- 0 1) j)) (- 0 1))) (or (= flag 1) (and (= flag 1) (not (and (not (and (<= n (+ b 1)) (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) j)))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) j)))) (or (<= n j) (<= 1 (+ (+ b 1) (* (- 0 1) j))))))))))))))) (=> (= flag 1) (or (and (= flag 1) (not (and (not (and (<= n (+ b 1)) (or (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))) (or (<= n (+ j 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))))))))) (and (= flag 1) (and (and (or (<= n (+ j 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))) (<= (+ (+ b 1) (* (- 0 1) (+ j 1))) (- 0 1))) (or (= flag 1) (and (= flag 1) (not (and (not (and (<= n (+ b 1)) (or (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))) (or (<= n (+ j 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1)))))))))))))))))))))
(define-fun B () Bool  (or (or (and (and (= j 0) (> n 0)) (= b 0)) (and (or (and (and (and (and (and (and (= |j'| 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (= flag 1)) (= j (+ |j'| 1))) (and (and (and (and (and (= j 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (not (= flag 1)))) (= b (+ |b'| 1)))) (and (or (and (and (and (and (and (or (and (and (and (and (and (and (= |j'| 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (= flag 1)) (= |j'@@0| (+ |j'| 1))) (and (and (and (and (and (= |j'@@0| 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (not (= flag 1)))) (= |b'@@0| (+ |b'| 1))) (< |b'@@0| n)) (< |b'@@0| n)) (= flag 1)) (= j (+ |j'@@0| 1))) (and (and (and (and (or (and (and (and (and (and (and (= |j'| 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (= flag 1)) (= j (+ |j'| 1))) (and (and (and (and (and (= j 0) (> n 0)) (= |b'| 0)) (< |b'| n)) (< |b'| n)) (not (= flag 1)))) (= |b'@@0| (+ |b'| 1))) (< |b'@@0| n)) (< |b'@@0| n)) (not (= flag 1)))) (= b (+ |b'@@0| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

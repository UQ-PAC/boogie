(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun i () Int)
(declare-fun n () Int)
(declare-fun k () Int)
(declare-fun j () Int)
(push 1)
(define-fun A () Bool  (and (not (<= i n)) (not (=> (< n i) (> (+ (+ k i) j) (* 2 n))))))
(define-fun B () Bool  (and (and (and (= j 0) (>= n 0)) (= i 0)) (or (= k 1) (>= k 0))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |j'| () Int)
(declare-fun |i'| () Int)
(push 1)
(define-fun A () Bool  (or (<= 1 (+ i (* (- 0 1) n))) (and (<= i n) (=> (<= i n) (<= 1 (+ (+ i 1) (* (- 0 1) n)))))))
(define-fun B () Bool  (or (and (and (and (= j 0) (>= n 0)) (= i 0)) (or (= k 1) (>= k 0))) (and (and (and (and (and (and (and (= |j'| 0) (>= n 0)) (= |i'| 0)) (or (= k 1) (>= k 0))) (<= |i'| n)) (<= |i'| n)) (= i (+ |i'| 1))) (= j (+ |j'| i)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(pop 1)
(push 1)
(define-fun A () Bool  (or (and (not (<= i n)) (not (=> (< n i) (> (+ (+ k i) j) (* 2 n))))) (and (<= i n) (=> (<= i n) (and (not (<= (+ i 1) n)) (not (=> (< n (+ i 1)) (> (+ (+ k (+ i 1)) (+ j (+ i 1))) (* 2 n)))))))))
(define-fun B () Bool  (or (and (and (and (= j 0) (>= n 0)) (= i 0)) (or (= k 1) (>= k 0))) (and (and (and (and (and (and (and (= |j'| 0) (>= n 0)) (= |i'| 0)) (or (= k 1) (>= k 0))) (<= |i'| n)) (<= |i'| n)) (= i (+ |i'| 1))) (= j (+ |j'| i)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |i'@@0| () Int)
(declare-fun |j'@@0| () Int)
(push 1)
(define-fun A () Bool  (or (or (<= (+ k j) (- 0 2)) (and (<= 1 (+ i (* (- 0 1) n))) (or (<= (+ k j) (- 0 2)) (<= 2 (+ i (+ (* (- 0 1) k) (* (- 0 1) j))))))) (and (<= i n) (=> (<= i n) (or (<= (+ k (+ j (+ i 1))) (- 0 2)) (and (<= 1 (+ (+ i 1) (* (- 0 1) n))) (or (<= (+ k (+ j (+ i 1))) (- 0 2)) (<= 2 (+ (+ i 1) (+ (* (- 0 1) k) (* (- 0 1) (+ j (+ i 1)))))))))))))
(define-fun B () Bool  (or (or (and (and (and (= j 0) (>= n 0)) (= i 0)) (or (= k 1) (>= k 0))) (and (and (and (and (and (and (and (= |j'| 0) (>= n 0)) (= |i'| 0)) (or (= k 1) (>= k 0))) (<= |i'| n)) (<= |i'| n)) (= i (+ |i'| 1))) (= j (+ |j'| i)))) (and (and (and (and (and (and (and (and (and (and (and (= |j'| 0) (>= n 0)) (= |i'| 0)) (or (= k 1) (>= k 0))) (<= |i'| n)) (<= |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |j'@@0| (+ |j'| |i'@@0|))) (<= |i'@@0| n)) (<= |i'@@0| n)) (= i (+ |i'@@0| 1))) (= j (+ |j'@@0| i)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |i'@@1| () Int)
(declare-fun |j'@@1| () Int)
(push 1)
(define-fun A () Bool  (or (and (not (and (not (<= 2 (+ i (+ (* (- 0 1) k) (* (- 0 1) j))))) (and (not (<= (+ i (+ k j)) (- 0 3))) (not (<= i (- 0 1)))))) (or (and (<= 2 (+ i (+ (* (- 0 1) k) (* (- 0 1) j)))) (<= 2 (+ (* 2 i) (+ (* (- 0 1) k) (* (- 0 1) j))))) (and (or (<= (+ k j) (- 0 2)) (<= i (- 0 2))) (and (or (<= (+ i (+ k j)) (- 0 3)) (and (<= 2 (+ i (+ (* (- 0 1) k) (* (- 0 1) j)))) (<= 2 (+ (* 2 i) (+ (* (- 0 1) k) (* (- 0 1) j)))))) (not (and (not (<= 2 (+ i (+ (* (- 0 1) k) (* (- 0 1) j))))) (and (not (<= (+ i (+ k j)) (- 0 3))) (not (<= i (- 0 1)))))))))) (and (<= i n) (=> (<= i n) (and (not (and (not (<= 2 (+ (+ i 1) (+ (* (- 0 1) k) (* (- 0 1) (+ j (+ i 1))))))) (and (not (<= (+ (+ i 1) (+ k (+ j (+ i 1)))) (- 0 3))) (not (<= (+ i 1) (- 0 1)))))) (or (and (<= 2 (+ (+ i 1) (+ (* (- 0 1) k) (* (- 0 1) (+ j (+ i 1)))))) (<= 2 (+ (* 2 (+ i 1)) (+ (* (- 0 1) k) (* (- 0 1) (+ j (+ i 1))))))) (and (or (<= (+ k (+ j (+ i 1))) (- 0 2)) (<= (+ i 1) (- 0 2))) (and (or (<= (+ (+ i 1) (+ k (+ j (+ i 1)))) (- 0 3)) (and (<= 2 (+ (+ i 1) (+ (* (- 0 1) k) (* (- 0 1) (+ j (+ i 1)))))) (<= 2 (+ (* 2 (+ i 1)) (+ (* (- 0 1) k) (* (- 0 1) (+ j (+ i 1)))))))) (not (and (not (<= 2 (+ (+ i 1) (+ (* (- 0 1) k) (* (- 0 1) (+ j (+ i 1))))))) (and (not (<= (+ (+ i 1) (+ k (+ j (+ i 1)))) (- 0 3))) (not (<= (+ i 1) (- 0 1))))))))))))))
(define-fun B () Bool  (or (or (or (and (and (and (= j 0) (>= n 0)) (= i 0)) (or (= k 1) (>= k 0))) (and (and (and (and (and (and (and (= |j'| 0) (>= n 0)) (= |i'| 0)) (or (= k 1) (>= k 0))) (<= |i'| n)) (<= |i'| n)) (= i (+ |i'| 1))) (= j (+ |j'| i)))) (and (and (and (and (and (and (and (and (and (and (and (= |j'| 0) (>= n 0)) (= |i'| 0)) (or (= k 1) (>= k 0))) (<= |i'| n)) (<= |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |j'@@0| (+ |j'| |i'@@0|))) (<= |i'@@0| n)) (<= |i'@@0| n)) (= i (+ |i'@@0| 1))) (= j (+ |j'@@0| i)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= |j'| 0) (>= n 0)) (= |i'| 0)) (or (= k 1) (>= k 0))) (<= |i'| n)) (<= |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |j'@@0| (+ |j'| |i'@@0|))) (<= |i'@@0| n)) (<= |i'@@0| n)) (= |i'@@1| (+ |i'@@0| 1))) (= |j'@@1| (+ |j'@@0| |i'@@1|))) (<= |i'@@1| n)) (<= |i'@@1| n)) (= i (+ |i'@@1| 1))) (= j (+ |j'@@1| i)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

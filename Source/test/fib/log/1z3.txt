(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= y 0)) u) u) (forall ((u@@0 Bool) )  (not (<= (+ x y) 0))))
))
(check-sat)
(pop 1)
(push 1)
(assert  (or (<= y 0) (and u (=> u (forall ((u@@1 Bool) ) (<= (+ x y) 0))))))
(apply qe)
(pop 1)
(declare-fun |x'| () Int)
(declare-fun |y'| () Int)
(declare-fun |u'| () Bool)
(declare-fun t1 () Int)
(declare-fun t2 () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (let ((q@.cse0 (<= y 0)))
 (and (or (<= x (- 0 1)) q@.cse0) (or (<= x (+ y (- 0 2))) q@.cse0)))) u) u) (forall ((u@@2 Bool) )  (not (let ((q@.cse0 (<= (+ x y) 0)))
 (and (or (<= (+ x y) (- 0 1)) q@.cse0) (or (<= (+ x y) (+ (+ x y) (- 0 2))) q@.cse0))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (let ((q@.cse0 (<= y 0)))
 (and (or (<= x (- 0 1)) q@.cse0) (or (<= x (+ y (- 0 2))) q@.cse0)))) (not u)))
))
(check-sat)
(pop 1)

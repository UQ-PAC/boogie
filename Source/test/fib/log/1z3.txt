(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun call0formal@u () Bool)
(declare-fun |y'| () Int)
(declare-fun |u'| () Bool)
(declare-fun t1 () Int)
(declare-fun |x'| () Int)
(declare-fun t2 () Int)
(declare-fun call0formal@u@@0 () Bool)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (and (and (and (and (not (<= |y'| 0)) |u'|) |u'|) (= t1 |x'|)) (= t2 |y'|)) (= x (+ t1 t2))) (= y (+ t1 t2))) (= u call0formal@u@@0)) (not (<= y 0)))
))
(check-sat)
(pop 1)
(push 1)
(assert  (or (<= y 0) (and u (=> u (forall ((call0formal@u@@1 Bool) ) (<= (+ x y) 0))))))
(apply (then ctx-solver-simplify qe))
(pop 1)
(declare-fun |x'@@0| () Int)
(declare-fun |y'@@0| () Int)
(declare-fun |u'@@0| () Bool)
(declare-fun |y'@@1| () Int)
(declare-fun |u'@@1| () Bool)
(declare-fun |x'@@1| () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (and (and (and (and (not (or (<= |y'@@1| 0) (and |u'@@1| (and (<= (+ |y'@@1| |x'@@1|) 0) (or (<= |y'@@1| 0) (and |u'@@1| (<= |x'@@1| (- 0 1)))))))) |u'@@1|) |u'@@1|) (= t1 |x'@@1|)) (= t2 |y'@@1|)) (= x (+ t1 t2))) (= y (+ t1 t2))) (= u call0formal@u@@0)) (not (or (<= y 0) (and u (and (<= (+ y x) 0) (or (<= y 0) (and u (<= x (- 0 1)))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (or (<= y 0) (and u (and (<= (+ y x) 0) (or (<= y 0) (and u (<= x (- 0 1)))))))) (not u)) (not u)) (>= y 1))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (= x 1) (= y 1)) (= u call0formal@u)) (not (or (<= y 0) (and u (and (<= (+ y x) 0) (or (<= y 0) (and u (<= x (- 0 1)))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (or (<= y 0) (and u (and (<= (+ y x) 0) (or (<= y 0) (and u (<= x (- 0 1)))))))) (not u)))
))
(check-sat)
(pop 1)

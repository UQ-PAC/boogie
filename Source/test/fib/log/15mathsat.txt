(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun j () Int)
(declare-fun n () Int)
(declare-fun k () Int)
(push 1)
(define-fun A () Bool  (and (not (< j n)) (not (=> (<= n j) (>= k 0)))))
(define-fun B () Bool  (and (and (> n 0) (> k n)) (= j 0)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |k'| () Int)
(declare-fun |j'| () Int)
(push 1)
(define-fun A () Bool  (or (<= n j) (and (< j n) (=> (< j n) (<= n (+ j 1))))))
(define-fun B () Bool  (or (and (and (> n 0) (> k n)) (= j 0)) (and (and (and (and (and (and (> n 0) (> |k'| n)) (= |j'| 0)) (< |j'| n)) (< |j'| n)) (= j (+ |j'| 1))) (= k (- |k'| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(pop 1)
(push 1)
(define-fun A () Bool  (or (and (not (< j n)) (not (=> (<= n j) (>= k 0)))) (and (< j n) (=> (< j n) (and (not (< (+ j 1) n)) (not (=> (<= n (+ j 1)) (>= (- k 1) 0))))))))
(define-fun B () Bool  (or (and (and (> n 0) (> k n)) (= j 0)) (and (and (and (and (and (and (> n 0) (> |k'| n)) (= |j'| 0)) (< |j'| n)) (< |j'| n)) (= j (+ |j'| 1))) (= k (- |k'| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |j'@@0| () Int)
(declare-fun |k'@@0| () Int)
(push 1)
(define-fun A () Bool  (or (or (and (<= n j) (<= k (- 0 1))) (and (or (and (<= n j) (<= k (- 0 1))) (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1))) (<= k 0))) (and (< j n) (=> (< j n) (or (and (<= n (+ j 1)) (<= (- k 1) (- 0 1))) (and (or (and (<= n (+ j 1)) (<= (- k 1) (- 0 1))) (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1))) (<= (- k 1) 0)))))))
(define-fun B () Bool  (or (or (and (and (> n 0) (> k n)) (= j 0)) (and (and (and (and (and (and (> n 0) (> |k'| n)) (= |j'| 0)) (< |j'| n)) (< |j'| n)) (= j (+ |j'| 1))) (= k (- |k'| 1)))) (and (and (and (and (and (and (and (and (and (and (> n 0) (> |k'| n)) (= |j'| 0)) (< |j'| n)) (< |j'| n)) (= |j'@@0| (+ |j'| 1))) (= |k'@@0| (- |k'| 1))) (< |j'@@0| n)) (< |j'@@0| n)) (= j (+ |j'@@0| 1))) (= k (- |k'@@0| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |j'@@1| () Int)
(declare-fun |k'@@1| () Int)
(push 1)
(define-fun A () Bool  (or (not (and (and (not (and (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (or (<= k 0) (<= k 1)))) (not (and (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (<= k 0)))) (not (and (not (and (not (<= k 0)) (and (not (and (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (or (<= k 0) (<= k 1)))) (not (and (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (<= k 0)))))) (or (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (and (<= 1 (+ j (* (- 0 1) n))) (not (and (and (not (and (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (or (<= k 0) (<= k 1)))) (not (and (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (<= k 0)))) (not (and (<= k (- 0 1)) (not (and (not (<= k 0)) (and (not (and (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (or (<= k 0) (<= k 1)))) (not (and (<= (+ j (+ (* (- 0 1) n) k)) (- 0 1)) (<= k 0)))))))))))))))) (and (< j n) (=> (< j n) (not (and (and (not (and (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (or (<= (- k 1) 0) (<= (- k 1) 1)))) (not (and (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (<= (- k 1) 0)))) (not (and (not (and (not (<= (- k 1) 0)) (and (not (and (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (or (<= (- k 1) 0) (<= (- k 1) 1)))) (not (and (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (<= (- k 1) 0)))))) (or (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (and (<= 1 (+ (+ j 1) (* (- 0 1) n))) (not (and (and (not (and (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (or (<= (- k 1) 0) (<= (- k 1) 1)))) (not (and (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (<= (- k 1) 0)))) (not (and (<= (- k 1) (- 0 1)) (not (and (not (<= (- k 1) 0)) (and (not (and (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (or (<= (- k 1) 0) (<= (- k 1) 1)))) (not (and (<= (+ (+ j 1) (+ (* (- 0 1) n) (- k 1))) (- 0 1)) (<= (- k 1) 0))))))))))))))))))))
(define-fun B () Bool  (or (or (or (and (and (> n 0) (> k n)) (= j 0)) (and (and (and (and (and (and (> n 0) (> |k'| n)) (= |j'| 0)) (< |j'| n)) (< |j'| n)) (= j (+ |j'| 1))) (= k (- |k'| 1)))) (and (and (and (and (and (and (and (and (and (and (> n 0) (> |k'| n)) (= |j'| 0)) (< |j'| n)) (< |j'| n)) (= |j'@@0| (+ |j'| 1))) (= |k'@@0| (- |k'| 1))) (< |j'@@0| n)) (< |j'@@0| n)) (= j (+ |j'@@0| 1))) (= k (- |k'@@0| 1)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (> n 0) (> |k'| n)) (= |j'| 0)) (< |j'| n)) (< |j'| n)) (= |j'@@0| (+ |j'| 1))) (= |k'@@0| (- |k'| 1))) (< |j'@@0| n)) (< |j'@@0| n)) (= |j'@@1| (+ |j'@@0| 1))) (= |k'@@1| (- |k'@@0| 1))) (< |j'@@1| n)) (< |j'@@1| n)) (= j (+ |j'@@1| 1))) (= k (- |k'@@1| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun x () Int)
(declare-fun y () Int)
(push 1)
(define-fun A () Bool  (and (not (< x 0)) (not (=> (<= 0 x) (> y 0)))))
(define-fun B () Bool (= x (- 0 50)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |x'| () Int)
(declare-fun |y'| () Int)
(push 1)
(define-fun A () Bool  (or (<= 0 x) (and (< x 0) (=> (< x 0) (<= 0 (+ x y))))))
(define-fun B () Bool  (or (= x (- 0 50)) (and (and (and (and (= |x'| (- 0 50)) (< |x'| 0)) (< |x'| 0)) (= x (+ |x'| |y'|))) (= y (+ |y'| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(pop 1)
(push 1)
(define-fun A () Bool  (or (and (not (< x 0)) (not (=> (<= 0 x) (> y 0)))) (and (< x 0) (=> (< x 0) (and (not (< (+ x y) 0)) (not (=> (<= 0 (+ x y)) (> (+ y 1) 0))))))))
(define-fun B () Bool  (or (= x (- 0 50)) (and (and (and (and (= |x'| (- 0 50)) (< |x'| 0)) (< |x'| 0)) (= x (+ |x'| |y'|))) (= y (+ |y'| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

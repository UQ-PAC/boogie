(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun b () Int)
(declare-fun n () Int)
(declare-fun flag () Int)
(declare-fun j () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= n b)) (< b n)) (< b n)) (and (=> (not (= flag 1)) (not (<= n (+ b 1)))) (=> (= flag 1) (not (<= n (+ b 1))))))
))
(check-sat)
(pop 1)
(declare-fun |j'| () Int)
(declare-fun |b'| () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (or (and (= flag 1) (not (and (not (and (<= n b) (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) j)))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) j)))) (or (<= n j) (<= 1 (+ b (* (- 0 1) j)))))))))) (and (= flag 1) (and (and (or (<= n j) (<= 1 (+ b (* (- 0 1) j)))) (<= (+ b (* (- 0 1) j)) (- 0 1))) (or (= flag 1) (and (= flag 1) (not (and (not (and (<= n b) (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) j)))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) j)))) (or (<= n j) (<= 1 (+ b (* (- 0 1) j))))))))))))))) (< b n)) (< b n)) (and (=> (not (= flag 1)) (not (or (and (= flag 1) (not (and (not (and (<= n (+ b 1)) (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) j)))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) j)))) (or (<= n j) (<= 1 (+ (+ b 1) (* (- 0 1) j)))))))))) (and (= flag 1) (and (and (or (<= n j) (<= 1 (+ (+ b 1) (* (- 0 1) j)))) (<= (+ (+ b 1) (* (- 0 1) j)) (- 0 1))) (or (= flag 1) (and (= flag 1) (not (and (not (and (<= n (+ b 1)) (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) j)))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) j)))) (or (<= n j) (<= 1 (+ (+ b 1) (* (- 0 1) j)))))))))))))))) (=> (= flag 1) (not (or (and (= flag 1) (not (and (not (and (<= n (+ b 1)) (or (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))) (or (<= n (+ j 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))))))))) (and (= flag 1) (and (and (or (<= n (+ j 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))) (<= (+ (+ b 1) (* (- 0 1) (+ j 1))) (- 0 1))) (or (= flag 1) (and (= flag 1) (not (and (not (and (<= n (+ b 1)) (or (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))))) (and (= flag 1) (not (and (or (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))) (or (<= n (+ j 1)) (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1)))))))))))))))))))
))
(check-sat)
(pop 1)
(declare-fun |j'@@0| () Int)
(declare-fun |b'@@0| () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (or (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1))) (and (= flag 1) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (and (= flag 1) (and (<= n b) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ b (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) n))))))))))) (not (and (= flag 1) (and (<= 1 (+ b (* (- 0 1) j))) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ b (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) n))))))))))))))))) (< b n)) (< b n)) (and (=> (not (= flag 1)) (not (or (and (= flag 1) (<= (+ (+ b 1) (* (- 0 1) j)) (- 0 1))) (and (= flag 1) (not (and (not (and (= flag 1) (<= (+ (+ b 1) (* (- 0 1) j)) (- 0 1)))) (and (not (and (= flag 1) (and (<= n (+ b 1)) (not (and (not (and (= flag 1) (<= (+ (+ b 1) (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ (+ b 1) (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) n))))))))))) (not (and (= flag 1) (and (<= 1 (+ (+ b 1) (* (- 0 1) j))) (not (and (not (and (= flag 1) (<= (+ (+ b 1) (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ (+ b 1) (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) n)))))))))))))))))) (=> (= flag 1) (not (or (and (= flag 1) (<= (+ (+ b 1) (* (- 0 1) (+ j 1))) (- 0 1))) (and (= flag 1) (not (and (not (and (= flag 1) (<= (+ (+ b 1) (* (- 0 1) (+ j 1))) (- 0 1)))) (and (not (and (= flag 1) (and (<= n (+ b 1)) (not (and (not (and (= flag 1) (<= (+ (+ b 1) (* (- 0 1) (+ j 1))) (- 0 1)))) (and (not (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))) (not (and (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) n))))))))))) (not (and (= flag 1) (and (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1)))) (not (and (not (and (= flag 1) (<= (+ (+ b 1) (* (- 0 1) (+ j 1))) (- 0 1)))) (and (not (<= 1 (+ (+ b 1) (* (- 0 1) (+ j 1))))) (not (and (<= (+ n (* (- 0 1) (+ j 1))) (- 0 1)) (<= 1 (+ (+ b 1) (* (- 0 1) n))))))))))))))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (or (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1))) (and (= flag 1) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (and (= flag 1) (and (<= n b) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ b (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) n))))))))))) (not (and (= flag 1) (and (<= 1 (+ b (* (- 0 1) j))) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ b (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) n))))))))))))))))) (not (< b n))) (<= n b)) (or (not (= flag 1)) (= j n)))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (= j 0) (> n 0)) (= b 0)) (not (or (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1))) (and (= flag 1) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (and (= flag 1) (and (<= n b) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ b (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) n))))))))))) (not (and (= flag 1) (and (<= 1 (+ b (* (- 0 1) j))) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ b (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) n))))))))))))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (or (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1))) (and (= flag 1) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (and (= flag 1) (and (<= n b) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ b (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) n))))))))))) (not (and (= flag 1) (and (<= 1 (+ b (* (- 0 1) j))) (not (and (not (and (= flag 1) (<= (+ b (* (- 0 1) j)) (- 0 1)))) (and (not (<= 1 (+ b (* (- 0 1) j)))) (not (and (<= (+ n (* (- 0 1) j)) (- 0 1)) (<= 1 (+ b (* (- 0 1) n))))))))))))))))) (not (< b n))))
))
(check-sat)
(pop 1)

(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun k () Int)
(declare-fun i () Int)
(declare-fun turn () Int)
(declare-fun call0formal@u () Bool)
(declare-fun pvlen () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= k (- 0 1))) u) u) (or (=> (not (= turn 0)) (or (=> (not (= turn 1)) (or (=> (not (= turn 2)) (or (=> (not (= turn 3)) (or (=> (not (= turn 4)) (not (<= k (- 0 1)))) (=> (= turn 4) (not (<= k (- 0 1)))))) (=> (= turn 3) (forall ((call0formal@u@@0 Bool) )  (or (=> (not call0formal@u@@0) (not (<= k (- 0 1)))) (=> call0formal@u@@0 (not (<= k (- 0 1))))))))) (=> (= turn 2) (forall ((call0formal@u@@1 Bool) )  (or (=> (not call0formal@u@@1) (not (<= (+ k 1) (- 0 1)))) (=> call0formal@u@@1 (not (<= (+ k 1) (- 0 1))))))))) (=> (= turn 1) (or (=> (>= pvlen i) (or (=> (not (= 2 2)) (or (=> (not (= 2 3)) (or (=> (not (= 2 4)) (not (<= k (- 0 1)))) (=> (= 2 4) (not (<= k (- 0 1)))))) (=> (= 2 3) (forall ((call0formal@u@@2 Bool) )  (or (=> (not call0formal@u@@2) (not (<= k (- 0 1)))) (=> call0formal@u@@2 (not (<= k (- 0 1))))))))) (=> (= 2 2) (forall ((call0formal@u@@3 Bool) )  (or (=> (not call0formal@u@@3) (not (<= (+ k 1) (- 0 1)))) (=> call0formal@u@@3 (not (<= (+ k 1) (- 0 1))))))))) (=> (> i pvlen) (or (=> (not (= 2 2)) (or (=> (not (= 2 3)) (or (=> (not (= 2 4)) (not (<= k (- 0 1)))) (=> (= 2 4) (not (<= k (- 0 1)))))) (=> (= 2 3) (forall ((call0formal@u@@4 Bool) )  (or (=> (not call0formal@u@@4) (not (<= k (- 0 1)))) (=> call0formal@u@@4 (not (<= k (- 0 1))))))))) (=> (= 2 2) (forall ((call0formal@u@@5 Bool) )  (or (=> (not call0formal@u@@5) (not (<= (+ k 1) (- 0 1)))) (=> call0formal@u@@5 (not (<= (+ k 1) (- 0 1))))))))))))) (=> (= turn 0) (forall ((call0formal@u@@6 Bool) )  (or (=> (not call0formal@u@@6) (or (=> (not (= 1 2)) (or (=> (not (= 1 3)) (or (=> (not (= 1 4)) (not (<= k (- 0 1)))) (=> (= 1 4) (not (<= k (- 0 1)))))) (=> (= 1 3) (forall ((call0formal@u@@7 Bool) )  (or (=> (not call0formal@u@@7) (not (<= k (- 0 1)))) (=> call0formal@u@@7 (not (<= k (- 0 1))))))))) (=> (= 1 2) (forall ((call0formal@u@@8 Bool) )  (or (=> (not call0formal@u@@8) (not (<= (+ k 1) (- 0 1)))) (=> call0formal@u@@8 (not (<= (+ k 1) (- 0 1))))))))) (=> call0formal@u@@6 (or (=> (not (= 0 2)) (or (=> (not (= 0 3)) (or (=> (not (= 0 4)) (not (<= k (- 0 1)))) (=> (= 0 4) (not (<= k (- 0 1)))))) (=> (= 0 3) (forall ((call0formal@u@@9 Bool) )  (or (=> (not call0formal@u@@9) (not (<= k (- 0 1)))) (=> call0formal@u@@9 (not (<= k (- 0 1))))))))) (=> (= 0 2) (forall ((call0formal@u@@10 Bool) )  (or (=> (not call0formal@u@@10) (not (<= (+ k 1) (- 0 1)))) (=> call0formal@u@@10 (not (<= (+ k 1) (- 0 1))))))))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= k (- 0 1))) (not u)) (not u)) (>= k 0))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (= k 0) (= i 0)) (= turn 0)) (= u call0formal@u)) (not (<= k (- 0 1))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (<= k (- 0 1))) (not u)))
))
(check-sat)
(pop 1)

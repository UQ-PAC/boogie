(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun i () Int)
(declare-fun n () Int)
(declare-fun k () Int)
(declare-fun c1 () Int)
(declare-fun c2 () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= n i)) (< i n)) (< i n)) (forall ((call0formal@u Bool) )  (or (=> (not call0formal@u) (or (=> (not (= 1 0)) (not (<= n (+ i 1)))) (=> (= 1 0) (not (<= n (+ i 1)))))) (=> call0formal@u (or (=> (not (= 0 0)) (not (<= n (+ i 1)))) (=> (= 0 0) (not (<= n (+ i 1)))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= n i)) (not (< i n))) (<= n i)) (> k n))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (and (and (> n 0) (< n 10)) (= k 0)) (= i 0)) (= c1 4000)) (= c2 2000)) (not (<= n i)))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (<= n i)) (not (< i n))))
))
(check-sat)
(pop 1)

(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun k () Int)
(declare-fun j () Int)
(declare-fun call0formal@u () Bool)
(declare-fun t () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (= k 0))) u) u) (and (=> (not (= t 0)) (not (not (= (+ k 1) 0)))) (=> (= t 0) (not (not (= k 0))))))
))
(check-sat)
(pop 1)
(declare-fun |j'| () Int)
(declare-fun |j'@@0| () Int)
(declare-fun |k'| () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (and (not u) (not (= k 0)))) u) u) (and (=> (not (= t 0)) (not (and (not u) (not (= (+ k 1) 0))))) (=> (= t 0) (not (and (not u) (not (= k 0)))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (and (not u) (not (= k 0)))) (not u)) (not u)) (or (= k 0) (= j (+ (* 2 k) 2))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (= j 2) (= k 0)) (= u call0formal@u)) (not (and (not u) (not (= k 0)))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (and (not u) (not (= k 0)))) (not u)))
))
(check-sat)
(pop 1)

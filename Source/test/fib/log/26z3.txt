(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun w () Int)
(declare-fun z () Int)
(declare-fun turn () Int)
(declare-fun call0formal@u () Bool)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (= x y))) u) u) (or (=> (not (= turn 0)) (or (=> (not (= turn 1)) (or (=> (not (= turn 2)) (forall ((call0formal@u@@0 Bool) )  (not (not (= x y))))) (=> (= turn 2) (forall ((call0formal@u@@1 Bool) )  (or (=> (not call0formal@u@@1) (forall ((call0formal@u@@2 Bool) )  (not (not (= x y))))) (=> call0formal@u@@1 (forall ((call0formal@u@@3 Bool) )  (not (not (= x y)))))))))) (=> (= turn 1) (or (=> (not (= (mod w 2) 1)) (or (=> (not (= (mod z 2) 0)) (forall ((call0formal@u@@4 Bool) )  (or (=> (not call0formal@u@@4) (or (=> (not (= 2 2)) (forall ((call0formal@u@@5 Bool) )  (not (not (= x y))))) (=> (= 2 2) (forall ((call0formal@u@@6 Bool) )  (or (=> (not call0formal@u@@6) (forall ((call0formal@u@@7 Bool) )  (not (not (= x y))))) (=> call0formal@u@@6 (forall ((call0formal@u@@8 Bool) )  (not (not (= x y)))))))))) (=> call0formal@u@@4 (or (=> (not (= 1 2)) (forall ((call0formal@u@@9 Bool) )  (not (not (= x y))))) (=> (= 1 2) (forall ((call0formal@u@@10 Bool) )  (or (=> (not call0formal@u@@10) (forall ((call0formal@u@@11 Bool) )  (not (not (= x y))))) (=> call0formal@u@@10 (forall ((call0formal@u@@12 Bool) )  (not (not (= x y))))))))))))) (=> (= (mod z 2) 0) (forall ((call0formal@u@@13 Bool) )  (or (=> (not call0formal@u@@13) (or (=> (not (= 2 2)) (forall ((call0formal@u@@14 Bool) )  (not (not (= x (+ y 1)))))) (=> (= 2 2) (forall ((call0formal@u@@15 Bool) )  (or (=> (not call0formal@u@@15) (forall ((call0formal@u@@16 Bool) )  (not (not (= x (+ y 1)))))) (=> call0formal@u@@15 (forall ((call0formal@u@@17 Bool) )  (not (not (= x (+ y 1))))))))))) (=> call0formal@u@@13 (or (=> (not (= 1 2)) (forall ((call0formal@u@@18 Bool) )  (not (not (= x (+ y 1)))))) (=> (= 1 2) (forall ((call0formal@u@@19 Bool) )  (or (=> (not call0formal@u@@19) (forall ((call0formal@u@@20 Bool) )  (not (not (= x (+ y 1)))))) (=> call0formal@u@@19 (forall ((call0formal@u@@21 Bool) )  (not (not (= x (+ y 1)))))))))))))))) (=> (= (mod w 2) 1) (or (=> (not (= (mod z 2) 0)) (forall ((call0formal@u@@22 Bool) )  (or (=> (not call0formal@u@@22) (or (=> (not (= 2 2)) (forall ((call0formal@u@@23 Bool) )  (not (not (= (+ x 1) y))))) (=> (= 2 2) (forall ((call0formal@u@@24 Bool) )  (or (=> (not call0formal@u@@24) (forall ((call0formal@u@@25 Bool) )  (not (not (= (+ x 1) y))))) (=> call0formal@u@@24 (forall ((call0formal@u@@26 Bool) )  (not (not (= (+ x 1) y)))))))))) (=> call0formal@u@@22 (or (=> (not (= 1 2)) (forall ((call0formal@u@@27 Bool) )  (not (not (= (+ x 1) y))))) (=> (= 1 2) (forall ((call0formal@u@@28 Bool) )  (or (=> (not call0formal@u@@28) (forall ((call0formal@u@@29 Bool) )  (not (not (= (+ x 1) y))))) (=> call0formal@u@@28 (forall ((call0formal@u@@30 Bool) )  (not (not (= (+ x 1) y))))))))))))) (=> (= (mod z 2) 0) (forall ((call0formal@u@@31 Bool) )  (or (=> (not call0formal@u@@31) (or (=> (not (= 2 2)) (forall ((call0formal@u@@32 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> (= 2 2) (forall ((call0formal@u@@33 Bool) )  (or (=> (not call0formal@u@@33) (forall ((call0formal@u@@34 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> call0formal@u@@33 (forall ((call0formal@u@@35 Bool) )  (not (not (= (+ x 1) (+ y 1))))))))))) (=> call0formal@u@@31 (or (=> (not (= 1 2)) (forall ((call0formal@u@@36 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> (= 1 2) (forall ((call0formal@u@@37 Bool) )  (or (=> (not call0formal@u@@37) (forall ((call0formal@u@@38 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> call0formal@u@@37 (forall ((call0formal@u@@39 Bool) )  (not (not (= (+ x 1) (+ y 1)))))))))))))))))))) (=> (= turn 0) (forall ((call0formal@u@@40 Bool) )  (or (=> (not call0formal@u@@40) (or (=> (not (= 2 1)) (or (=> (not (= 2 2)) (forall ((call0formal@u@@41 Bool) )  (not (not (= x y))))) (=> (= 2 2) (forall ((call0formal@u@@42 Bool) )  (or (=> (not call0formal@u@@42) (forall ((call0formal@u@@43 Bool) )  (not (not (= x y))))) (=> call0formal@u@@42 (forall ((call0formal@u@@44 Bool) )  (not (not (= x y)))))))))) (=> (= 2 1) (or (=> (not (= (mod w 2) 1)) (or (=> (not (= (mod z 2) 0)) (forall ((call0formal@u@@45 Bool) )  (or (=> (not call0formal@u@@45) (or (=> (not (= 2 2)) (forall ((call0formal@u@@46 Bool) )  (not (not (= x y))))) (=> (= 2 2) (forall ((call0formal@u@@47 Bool) )  (or (=> (not call0formal@u@@47) (forall ((call0formal@u@@48 Bool) )  (not (not (= x y))))) (=> call0formal@u@@47 (forall ((call0formal@u@@49 Bool) )  (not (not (= x y)))))))))) (=> call0formal@u@@45 (or (=> (not (= 1 2)) (forall ((call0formal@u@@50 Bool) )  (not (not (= x y))))) (=> (= 1 2) (forall ((call0formal@u@@51 Bool) )  (or (=> (not call0formal@u@@51) (forall ((call0formal@u@@52 Bool) )  (not (not (= x y))))) (=> call0formal@u@@51 (forall ((call0formal@u@@53 Bool) )  (not (not (= x y))))))))))))) (=> (= (mod z 2) 0) (forall ((call0formal@u@@54 Bool) )  (or (=> (not call0formal@u@@54) (or (=> (not (= 2 2)) (forall ((call0formal@u@@55 Bool) )  (not (not (= x (+ y 1)))))) (=> (= 2 2) (forall ((call0formal@u@@56 Bool) )  (or (=> (not call0formal@u@@56) (forall ((call0formal@u@@57 Bool) )  (not (not (= x (+ y 1)))))) (=> call0formal@u@@56 (forall ((call0formal@u@@58 Bool) )  (not (not (= x (+ y 1))))))))))) (=> call0formal@u@@54 (or (=> (not (= 1 2)) (forall ((call0formal@u@@59 Bool) )  (not (not (= x (+ y 1)))))) (=> (= 1 2) (forall ((call0formal@u@@60 Bool) )  (or (=> (not call0formal@u@@60) (forall ((call0formal@u@@61 Bool) )  (not (not (= x (+ y 1)))))) (=> call0formal@u@@60 (forall ((call0formal@u@@62 Bool) )  (not (not (= x (+ y 1)))))))))))))))) (=> (= (mod w 2) 1) (or (=> (not (= (mod z 2) 0)) (forall ((call0formal@u@@63 Bool) )  (or (=> (not call0formal@u@@63) (or (=> (not (= 2 2)) (forall ((call0formal@u@@64 Bool) )  (not (not (= (+ x 1) y))))) (=> (= 2 2) (forall ((call0formal@u@@65 Bool) )  (or (=> (not call0formal@u@@65) (forall ((call0formal@u@@66 Bool) )  (not (not (= (+ x 1) y))))) (=> call0formal@u@@65 (forall ((call0formal@u@@67 Bool) )  (not (not (= (+ x 1) y)))))))))) (=> call0formal@u@@63 (or (=> (not (= 1 2)) (forall ((call0formal@u@@68 Bool) )  (not (not (= (+ x 1) y))))) (=> (= 1 2) (forall ((call0formal@u@@69 Bool) )  (or (=> (not call0formal@u@@69) (forall ((call0formal@u@@70 Bool) )  (not (not (= (+ x 1) y))))) (=> call0formal@u@@69 (forall ((call0formal@u@@71 Bool) )  (not (not (= (+ x 1) y))))))))))))) (=> (= (mod z 2) 0) (forall ((call0formal@u@@72 Bool) )  (or (=> (not call0formal@u@@72) (or (=> (not (= 2 2)) (forall ((call0formal@u@@73 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> (= 2 2) (forall ((call0formal@u@@74 Bool) )  (or (=> (not call0formal@u@@74) (forall ((call0formal@u@@75 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> call0formal@u@@74 (forall ((call0formal@u@@76 Bool) )  (not (not (= (+ x 1) (+ y 1))))))))))) (=> call0formal@u@@72 (or (=> (not (= 1 2)) (forall ((call0formal@u@@77 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> (= 1 2) (forall ((call0formal@u@@78 Bool) )  (or (=> (not call0formal@u@@78) (forall ((call0formal@u@@79 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> call0formal@u@@78 (forall ((call0formal@u@@80 Bool) )  (not (not (= (+ x 1) (+ y 1)))))))))))))))))))) (=> call0formal@u@@40 (or (=> (not (= 1 1)) (or (=> (not (= 1 2)) (forall ((call0formal@u@@81 Bool) )  (not (not (= x y))))) (=> (= 1 2) (forall ((call0formal@u@@82 Bool) )  (or (=> (not call0formal@u@@82) (forall ((call0formal@u@@83 Bool) )  (not (not (= x y))))) (=> call0formal@u@@82 (forall ((call0formal@u@@84 Bool) )  (not (not (= x y)))))))))) (=> (= 1 1) (or (=> (not (= (mod w 2) 1)) (or (=> (not (= (mod z 2) 0)) (forall ((call0formal@u@@85 Bool) )  (or (=> (not call0formal@u@@85) (or (=> (not (= 2 2)) (forall ((call0formal@u@@86 Bool) )  (not (not (= x y))))) (=> (= 2 2) (forall ((call0formal@u@@87 Bool) )  (or (=> (not call0formal@u@@87) (forall ((call0formal@u@@88 Bool) )  (not (not (= x y))))) (=> call0formal@u@@87 (forall ((call0formal@u@@89 Bool) )  (not (not (= x y)))))))))) (=> call0formal@u@@85 (or (=> (not (= 1 2)) (forall ((call0formal@u@@90 Bool) )  (not (not (= x y))))) (=> (= 1 2) (forall ((call0formal@u@@91 Bool) )  (or (=> (not call0formal@u@@91) (forall ((call0formal@u@@92 Bool) )  (not (not (= x y))))) (=> call0formal@u@@91 (forall ((call0formal@u@@93 Bool) )  (not (not (= x y))))))))))))) (=> (= (mod z 2) 0) (forall ((call0formal@u@@94 Bool) )  (or (=> (not call0formal@u@@94) (or (=> (not (= 2 2)) (forall ((call0formal@u@@95 Bool) )  (not (not (= x (+ y 1)))))) (=> (= 2 2) (forall ((call0formal@u@@96 Bool) )  (or (=> (not call0formal@u@@96) (forall ((call0formal@u@@97 Bool) )  (not (not (= x (+ y 1)))))) (=> call0formal@u@@96 (forall ((call0formal@u@@98 Bool) )  (not (not (= x (+ y 1))))))))))) (=> call0formal@u@@94 (or (=> (not (= 1 2)) (forall ((call0formal@u@@99 Bool) )  (not (not (= x (+ y 1)))))) (=> (= 1 2) (forall ((call0formal@u@@100 Bool) )  (or (=> (not call0formal@u@@100) (forall ((call0formal@u@@101 Bool) )  (not (not (= x (+ y 1)))))) (=> call0formal@u@@100 (forall ((call0formal@u@@102 Bool) )  (not (not (= x (+ y 1)))))))))))))))) (=> (= (mod w 2) 1) (or (=> (not (= (mod z 2) 0)) (forall ((call0formal@u@@103 Bool) )  (or (=> (not call0formal@u@@103) (or (=> (not (= 2 2)) (forall ((call0formal@u@@104 Bool) )  (not (not (= (+ x 1) y))))) (=> (= 2 2) (forall ((call0formal@u@@105 Bool) )  (or (=> (not call0formal@u@@105) (forall ((call0formal@u@@106 Bool) )  (not (not (= (+ x 1) y))))) (=> call0formal@u@@105 (forall ((call0formal@u@@107 Bool) )  (not (not (= (+ x 1) y)))))))))) (=> call0formal@u@@103 (or (=> (not (= 1 2)) (forall ((call0formal@u@@108 Bool) )  (not (not (= (+ x 1) y))))) (=> (= 1 2) (forall ((call0formal@u@@109 Bool) )  (or (=> (not call0formal@u@@109) (forall ((call0formal@u@@110 Bool) )  (not (not (= (+ x 1) y))))) (=> call0formal@u@@109 (forall ((call0formal@u@@111 Bool) )  (not (not (= (+ x 1) y))))))))))))) (=> (= (mod z 2) 0) (forall ((call0formal@u@@112 Bool) )  (or (=> (not call0formal@u@@112) (or (=> (not (= 2 2)) (forall ((call0formal@u@@113 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> (= 2 2) (forall ((call0formal@u@@114 Bool) )  (or (=> (not call0formal@u@@114) (forall ((call0formal@u@@115 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> call0formal@u@@114 (forall ((call0formal@u@@116 Bool) )  (not (not (= (+ x 1) (+ y 1))))))))))) (=> call0formal@u@@112 (or (=> (not (= 1 2)) (forall ((call0formal@u@@117 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> (= 1 2) (forall ((call0formal@u@@118 Bool) )  (or (=> (not call0formal@u@@118) (forall ((call0formal@u@@119 Bool) )  (not (not (= (+ x 1) (+ y 1)))))) (=> call0formal@u@@118 (forall ((call0formal@u@@120 Bool) )  (not (not (= (+ x 1) (+ y 1)))))))))))))))))))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (= x y))) (not u)) (not u)) (= x y))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= turn 0)) (= u call0formal@u)) (not (not (= x y))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (not (= x y))) (not u)))
))
(check-sat)
(pop 1)

(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun w () Int)
(declare-fun z () Int)
(declare-fun call0formal@u () Bool)
(declare-fun |x'| () Int)
(declare-fun |y'| () Int)
(declare-fun |u'| () Bool)
(declare-fun |w'| () Int)
(declare-fun |z'| () Int)
(declare-fun call0formal@u@@0 () Bool)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (or (and (and (and (or (and (and (and (and (and (not (not (= |x'| |y'|))) |u'|) |u'|) (= |w'| 1)) (= x (+ |x'| 1))) (= w 0)) (and (and (and (not (not (= x |y'|))) |u'|) |u'|) (not (= w 1)))) (= |z'| 0)) (= y (+ |y'| 1))) (= z 1)) (and (or (and (and (and (and (and (not (not (= |x'| y))) |u'|) |u'|) (= |w'| 1)) (= x (+ |x'| 1))) (= w 0)) (and (and (and (not (not (= x y))) |u'|) |u'|) (not (= w 1)))) (not (= z 0)))) (= u call0formal@u@@0)) (not (not (= x y))))
))
(check-sat)
(pop 1)
(push 1)
(assert  (or (not (= x y)) (and u (=> u (and (=> (not (= w 1)) (and (=> (not (= z 0)) (forall ((call0formal@u@@1 Bool) )  (not (= x y)))) (=> (= z 0) (forall ((call0formal@u@@2 Bool) )  (not (= x (+ y 1))))))) (=> (= w 1) (and (=> (not (= z 0)) (forall ((call0formal@u@@3 Bool) )  (not (= (+ x 1) y)))) (=> (= z 0) (forall ((call0formal@u@@4 Bool) )  (not (= (+ x 1) (+ y 1))))))))))))
(apply (then ctx-solver-simplify qe))
(pop 1)
(declare-fun |w'@@0| () Int)
(declare-fun |z'@@0| () Int)
(declare-fun |x'@@0| () Int)
(declare-fun |y'@@0| () Int)
(declare-fun |u'@@0| () Bool)
(push 1)
(assert  (or (and (not u) (not (=> (not u) (= x y)))) (and u (=> u (and (=> (not (= w 1)) (and (=> (not (= z 0)) (forall ((call0formal@u@@5 Bool) )  (and (not call0formal@u@@5) (not (=> (not call0formal@u@@5) (= x y)))))) (=> (= z 0) (forall ((call0formal@u@@6 Bool) )  (and (not call0formal@u@@6) (not (=> (not call0formal@u@@6) (= x (+ y 1))))))))) (=> (= w 1) (and (=> (not (= z 0)) (forall ((call0formal@u@@7 Bool) )  (and (not call0formal@u@@7) (not (=> (not call0formal@u@@7) (= (+ x 1) y)))))) (=> (= z 0) (forall ((call0formal@u@@8 Bool) )  (and (not call0formal@u@@8) (not (=> (not call0formal@u@@8) (= (+ x 1) (+ y 1))))))))))))))
(apply (then ctx-solver-simplify qe))
(pop 1)

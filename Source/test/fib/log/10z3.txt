(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun w () Int)
(declare-fun z () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (= x y))) u) u) (and (=> (not (= w 1)) (and (=> (not (= z 0)) (not (not (= x y)))) (=> (= z 0) (not (not (= x (+ y 1))))))) (=> (= w 1) (and (=> (not (= z 0)) (not (not (= (+ x 1) y)))) (=> (= z 0) (not (not (= (+ x 1) (+ y 1)))))))))
))
(check-sat)
(pop 1)
(declare-fun |w'| () Int)
(declare-fun |z'| () Int)
(declare-fun |x'| () Int)
(declare-fun |y'| () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (not (and (or u (= x y)) (not (and u (and (= z 0) (not (and (or u (= x y)) (not (and u (not (= z 0)))))))))))) u) u) (and (=> (not (= w 1)) (and (=> (not (= z 0)) (not (not (and (or u (= x y)) (not (and u (and (= z 0) (not (and (or u (= x y)) (not (and u (not (= z 0))))))))))))) (=> (= z 0) (not (not (and (or u (= x (+ y 1))) (not (and u (and (= 1 0) (not (and (or u (= x (+ y 1))) (not (and u (not (= 1 0))))))))))))))) (=> (= w 1) (and (=> (not (= z 0)) (not (not (and (or u (= (+ x 1) y)) (not (and u (and (= z 0) (not (and (or u (= (+ x 1) y)) (not (and u (not (= z 0))))))))))))) (=> (= z 0) (not (not (and (or u (= (+ x 1) (+ y 1))) (not (and u (and (= 1 0) (not (and (or u (= (+ x 1) (+ y 1))) (not (and u (not (= 1 0)))))))))))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (not (and (or u (= x y)) (not (and u (and (= z 0) (not (and (or u (= x y)) (not (and u (not (= z 0)))))))))))) (not u)))
))
(check-sat)
(pop 1)

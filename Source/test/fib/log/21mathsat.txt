(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun i () Int)
(declare-fun n () Int)
(declare-fun k () Int)
(declare-fun c1 () Int)
(declare-fun c2 () Int)
(push 1)
(define-fun A () Bool  (and (not (< i n)) (not (=> (<= n i) (> k n)))))
(define-fun B () Bool  (and (and (and (and (and (> n 0) (< n 10)) (= k 0)) (= i 0)) (= c1 4000)) (= c2 2000)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |k'| () Int)
(declare-fun |i'| () Int)
(declare-fun u () Bool)
(declare-fun call0formal@u@@0 () Bool)
(declare-fun v () Int)
(declare-fun |k'@@0| () Int)
(push 1)
(define-fun A () Bool (or (<= n i) (and (< i n) (=> (< i n) (<= n (+ 1 i))))))
(define-fun B () Bool  (or (and (and (and (and (and (> n 0) (< n 10)) (= k 0)) (= i 0)) (= c1 4000)) (= c2 2000)) (or (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) u) (= v 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) (not u)) (= v 1))) (= v 0)) (= k (+ |k'| c1))) (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) u) (= v 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) (not u)) (= v 1))) (not (= v 0))) (= k (+ |k'@@0| c2))))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(pop 1)
(push 1)
(define-fun A () Bool (or (and (not (< i n)) (not (=> (<= n i) (> k n)))) (and (< i n) (=> (< i n) (not (or (not (and (<= n (+ 1 i)) (not (or (not (<= n (+ 1 i))) (not (<= (+ k c1) n)))))) (not (and (<= n (+ 1 i)) (not (or (not (<= n (+ 1 i))) (not (<= (+ k c2) n))))))))))))
(define-fun B () Bool  (or (and (and (and (and (and (> n 0) (< n 10)) (= k 0)) (= i 0)) (= c1 4000)) (= c2 2000)) (or (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) u) (= v 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) (not u)) (= v 1))) (= v 0)) (= k (+ |k'| c1))) (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) u) (= v 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) (not u)) (= v 1))) (not (= v 0))) (= k (+ |k'@@0| c2))))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |i'@@0| () Int)
(declare-fun |u'| () Bool)
(declare-fun |call0formal@u'| () Bool)
(declare-fun |v'| () Int)
(declare-fun |k'@@1| () Int)
(declare-fun |v'@@0| () Int)
(declare-fun |k'@@2| () Int)
(push 1)
(define-fun A () Bool (or (and (or (<= k n) (<= 0 (+ n (* (- 0 1) k) (* (- 0 1) c1)))) (or (<= n i) (<= 0 (+ n (* (- 0 1) k) (* (- 0 1) c1))))) (and (< i n) (=> (< i n) (not (or (not (and (or (<= (+ k c2) n) (<= 0 (+ n (* (- 1) k) (* (- 1) c2) (* (- 1) c1)))) (or (<= n (+ 1 i)) (<= 0 (+ n (* (- 1) k) (* (- 1) c2) (* (- 1) c1)))))) (not (and (or (<= (+ k c1) n) (<= 0 (+ n (* (- 1) k) (* (- 2) c1)))) (or (<= n (+ 1 i)) (<= 0 (+ n (* (- 1) k) (* (- 2) c1))))))))))))
(define-fun B () Bool  (or (or (and (and (and (and (and (> n 0) (< n 10)) (= k 0)) (= i 0)) (= c1 4000)) (= c2 2000)) (or (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) u) (= v 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) (not u)) (= v 1))) (= v 0)) (= k (+ |k'| c1))) (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) u) (= v 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= i (+ |i'| 1))) (= u call0formal@u@@0)) (not u)) (= v 1))) (not (= v 0))) (= k (+ |k'@@0| c2))))) (or (and (and (or (and (and (and (and (and (and (or (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) |u'|) (= |v'| 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) (not |u'|)) (= |v'| 1))) (= |v'| 0)) (= |k'@@1| (+ |k'| c1))) (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) |u'|) (= |v'| 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) (not |u'|)) (= |v'| 1))) (not (= |v'| 0))) (= |k'@@1| (+ |k'@@0| c2)))) (< |i'@@0| n)) (< |i'@@0| n)) (= i (+ |i'@@0| 1))) (= u call0formal@u@@0)) u) (= v 0)) (and (and (and (and (and (and (or (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) |u'|) (= |v'@@0| 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) (not |u'|)) (= |v'@@0| 1))) (= |v'@@0| 0)) (= |k'@@1| (+ |k'| c1))) (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) |u'|) (= |v'@@0| 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) (not |u'|)) (= |v'@@0| 1))) (not (= |v'@@0| 0))) (= |k'@@1| (+ |k'@@0| c2)))) (< |i'@@0| n)) (< |i'@@0| n)) (= i (+ |i'@@0| 1))) (= u call0formal@u@@0)) (not u)) (= v 1))) (= v 0)) (= k (+ |k'@@1| c1))) (and (and (or (and (and (and (and (and (and (or (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) |u'|) (= |v'| 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) (not |u'|)) (= |v'| 1))) (= |v'| 0)) (= |k'@@2| (+ |k'| c1))) (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) |u'|) (= |v'| 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) (not |u'|)) (= |v'| 1))) (not (= |v'| 0))) (= |k'@@2| (+ |k'@@0| c2)))) (< |i'@@0| n)) (< |i'@@0| n)) (= i (+ |i'@@0| 1))) (= u call0formal@u@@0)) u) (= v 0)) (and (and (and (and (and (and (or (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) |u'|) (= |v'@@0| 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) (not |u'|)) (= |v'@@0| 1))) (= |v'@@0| 0)) (= |k'@@2| (+ |k'| c1))) (and (and (or (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) |u'|) (= |v'@@0| 0)) (and (and (and (and (and (and (and (and (and (and (and (> n 0) (< n 10)) (= |k'@@0| 0)) (= |i'| 0)) (= c1 4000)) (= c2 2000)) (< |i'| n)) (< |i'| n)) (= |i'@@0| (+ |i'| 1))) (= |u'| |call0formal@u'|)) (not |u'|)) (= |v'@@0| 1))) (not (= |v'@@0| 0))) (= |k'@@2| (+ |k'@@0| c2)))) (< |i'@@0| n)) (< |i'@@0| n)) (= i (+ |i'@@0| 1))) (= u call0formal@u@@0)) (not u)) (= v 1))) (not (= v 0))) (= k (+ |k'@@2| c2))))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

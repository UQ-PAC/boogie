(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun u () Bool)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun z () Int)
(declare-fun k () Int)
(push 1)
(define-fun A () Bool  (and (not u) (not (=> (not u) (and (= x y) (= y z))))))
(define-fun B () Bool  (and (and (and (= x 0) (= y 0)) (= z 0)) (= k 0)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |x'| () Int)
(declare-fun |y'| () Int)
(declare-fun |z'| () Int)
(declare-fun |k'| () Int)
(push 1)
(define-fun A () Bool  (or (not (and (= x y) (= y z))) (and u (=> u (and (=> (not (= (mod k 3) 0)) (not (and (= x (+ y 1)) (= (+ y 1) (+ z 1))))) (=> (= (mod k 3) 0) (not (and (= (+ x 1) (+ y 1)) (= (+ y 1) (+ z 1))))))))))
(define-fun B () Bool  (or (and (and (and (= x 0) (= y 0)) (= z 0)) (= k 0)) (and (and (and (or (and (and (and (and (and (and (and (= |x'| 0) (= |y'| 0)) (= |z'| 0)) (= |k'| 0)) u) u) (= (mod |k'| 3) 0)) (= x (+ |x'| 1))) (and (and (and (and (and (and (= x 0) (= |y'| 0)) (= |z'| 0)) (= |k'| 0)) u) u) (not (= (mod |k'| 3) 0)))) (= y (+ |y'| 1))) (= z (+ |z'| 1))) (= k (+ (+ x y) z)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun i () Int)
(declare-fun k () Int)
(declare-fun n () Int)
(declare-fun j () Int)
(push 1)
(define-fun A () Bool  (and (not (<= i k)) (not (=> (< k i) (or (not (= n 1)) (= i j))))))
(define-fun B () Bool  (and (and (or (= n 1) (= n 2)) (= i 0)) (= j 0)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |i'| () Int)
(declare-fun |j'| () Int)
(push 1)
(define-fun A () Bool  (or (not (= i j)) (and (<= i k) (=> (<= i k) (not (= (+ i 1) (+ j n)))))))
(define-fun B () Bool  (or (and (and (or (= n 1) (= n 2)) (= i 0)) (= j 0)) (and (and (and (and (and (and (or (= n 1) (= n 2)) (= |i'| 0)) (= |j'| 0)) (<= |i'| k)) (<= |i'| k)) (= i (+ |i'| 1))) (= j (+ |j'| n)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(pop 1)
(push 1)
(define-fun A () Bool  (or (and (not (<= i k)) (not (=> (< k i) (or (not (= n 1)) (= i j))))) (and (<= i k) (=> (<= i k) (and (not (<= (+ i 1) k)) (not (=> (< k (+ i 1)) (or (not (= n 1)) (= (+ i 1) (+ j n))))))))))
(define-fun B () Bool  (or (and (and (or (= n 1) (= n 2)) (= i 0)) (= j 0)) (and (and (and (and (and (and (or (= n 1) (= n 2)) (= |i'| 0)) (= |j'| 0)) (<= |i'| k)) (<= |i'| k)) (= i (+ |i'| 1))) (= j (+ |j'| n)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun u () Bool)
(declare-fun k () Int)
(declare-fun j () Int)
(push 1)
(define-fun A () Bool  (and (not u) (not (=> (not u) (or (= k 0) (= j (+ (* 2 k) 2)))))))
(define-fun B () Bool  (and (= j 2) (= k 0)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun t () Int)
(declare-fun |j'| () Int)
(declare-fun |j'@@0| () Int)
(declare-fun |k'| () Int)
(push 1)
(define-fun A () Bool  (or (not (= k 0)) (and u (=> u (and (=> (not (= t 0)) (not (= (+ k 1) 0))) (=> (= t 0) (not (= k 0))))))))
(define-fun B () Bool  (or (and (= j 2) (= k 0)) (or (and (and (and (and (and (= |j'| 2) (= k 0)) u) u) (= t 0)) (= j (+ |j'| 4))) (and (and (and (and (and (and (= |j'@@0| 2) (= |k'| 0)) u) u) (not (= t 0))) (= j (+ |j'@@0| 2))) (= k (+ |k'| 1))))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(pop 1)
(push 1)
(define-fun A () Bool  (or (and (not u) (not (=> (not u) (or (= k 0) (= j (+ (* 2 k) 2)))))) (and u (=> u (and (=> (not (= t 0)) (and (not u) (not (=> (not u) (or (= (+ k 1) 0) (= (+ j 2) (+ (* 2 (+ k 1)) 2))))))) (=> (= t 0) (and (not u) (not (=> (not u) (or (= k 0) (= (+ j 4) (+ (* 2 k) 2))))))))))))
(define-fun B () Bool  (or (and (= j 2) (= k 0)) (or (and (and (and (and (and (= |j'| 2) (= k 0)) u) u) (= t 0)) (= j (+ |j'| 4))) (and (and (and (and (and (and (= |j'@@0| 2) (= |k'| 0)) u) u) (not (= t 0))) (= j (+ |j'@@0| 2))) (= k (+ |k'| 1))))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

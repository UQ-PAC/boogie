(set-option :print-success false)
(set-info :smt-lib-version 2.6)
; done setting options


(declare-fun j () Int)
(declare-fun m () Int)
(declare-fun a () Int)
(push 1)
(define-fun A () Bool  (and (not (<= j m)) (not (=> (< m j) (and (>= a (- 0 m)) (<= a m))))))
(define-fun B () Bool  (and (and (= a 0) (> m 0)) (= j 1)))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |a'| () Int)
(declare-fun |j'| () Int)
(declare-fun |a'@@0| () Int)
(push 1)
(define-fun A () Bool  (or (<= 1 (+ j (* (- 0 1) m))) (and (<= j m) (=> (<= j m) (and (<= 1 (+ (+ j 1) (* (- 0 1) m))) (<= 1 (+ (+ j 1) (* (- 0 1) m))))))))
(define-fun B () Bool  (or (and (and (= a 0) (> m 0)) (= j 1)) (and (or (and (and (and (and (and (= |a'| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= a (+ |a'| 1))) (and (and (and (and (and (= |a'@@0| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= a (- |a'@@0| 1)))) (= j (+ |j'| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(pop 1)
(push 1)
(define-fun A () Bool  (or (and (not (<= j m)) (not (=> (< m j) (and (>= a (- 0 m)) (<= a m))))) (and (<= j m) (=> (<= j m) (and (and (not (<= (+ j 1) m)) (not (=> (< m (+ j 1)) (and (>= (- a 1) (- 0 m)) (<= (- a 1) m))))) (and (not (<= (+ j 1) m)) (not (=> (< m (+ j 1)) (and (>= (+ a 1) (- 0 m)) (<= (+ a 1) m))))))))))
(define-fun B () Bool  (or (and (and (= a 0) (> m 0)) (= j 1)) (and (or (and (and (and (and (and (= |a'| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= a (+ |a'| 1))) (and (and (and (and (and (= |a'@@0| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= a (- |a'@@0| 1)))) (= j (+ |j'| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)
(declare-fun |a'@@1| () Int)
(declare-fun |j'@@0| () Int)
(declare-fun |a'@@2| () Int)
(push 1)
(define-fun A () Bool  (or (and (not (and (and (not (<= m a)) (and (not (<= (+ m a) (- 0 1))) (not (<= (+ m a) (- 0 2))))) (not (<= (+ m (* (- 0 1) a)) (- 0 1))))) (not (and (or (and (and (not (<= m a)) (and (not (<= (+ m a) (- 0 1))) (not (<= (+ m a) (- 0 2))))) (not (<= (+ m (* (- 0 1) a)) (- 0 1)))) (and (not (<= m 0)) (and (not (and (or (<= m 0) (and (<= 1 (+ j (* (- 0 1) m))) (<= (+ m a) (- 0 1)))) (not (and (and (not (<= m a)) (and (not (<= (+ m a) (- 0 1))) (not (<= (+ m a) (- 0 2))))) (not (<= (+ m (* (- 0 1) a)) (- 0 1))))))) (and (not (<= m 0)) (not (and (<= (+ m (* (- 0 1) a)) (- 0 1)) (or (<= 1 (+ j (* (- 0 1) m))) (<= (+ m (* (- 0 1) a)) (- 0 2))))))))) (not (and (<= (+ m a) (- 0 1)) (<= (+ m a) (- 0 2))))))) (and (<= j m) (=> (<= j m) (and (and (not (and (and (not (<= m (- a 1))) (and (not (<= (+ m (- a 1)) (- 0 1))) (not (<= (+ m (- a 1)) (- 0 2))))) (not (<= (+ m (* (- 0 1) (- a 1))) (- 0 1))))) (not (and (or (and (and (not (<= m (- a 1))) (and (not (<= (+ m (- a 1)) (- 0 1))) (not (<= (+ m (- a 1)) (- 0 2))))) (not (<= (+ m (* (- 0 1) (- a 1))) (- 0 1)))) (and (not (<= m 0)) (and (not (and (or (<= m 0) (and (<= 1 (+ (+ j 1) (* (- 0 1) m))) (<= (+ m (- a 1)) (- 0 1)))) (not (and (and (not (<= m (- a 1))) (and (not (<= (+ m (- a 1)) (- 0 1))) (not (<= (+ m (- a 1)) (- 0 2))))) (not (<= (+ m (* (- 0 1) (- a 1))) (- 0 1))))))) (and (not (<= m 0)) (not (and (<= (+ m (* (- 0 1) (- a 1))) (- 0 1)) (or (<= 1 (+ (+ j 1) (* (- 0 1) m))) (<= (+ m (* (- 0 1) (- a 1))) (- 0 2))))))))) (not (and (<= (+ m (- a 1)) (- 0 1)) (<= (+ m (- a 1)) (- 0 2))))))) (and (not (and (and (not (<= m (+ a 1))) (and (not (<= (+ m (+ a 1)) (- 0 1))) (not (<= (+ m (+ a 1)) (- 0 2))))) (not (<= (+ m (* (- 0 1) (+ a 1))) (- 0 1))))) (not (and (or (and (and (not (<= m (+ a 1))) (and (not (<= (+ m (+ a 1)) (- 0 1))) (not (<= (+ m (+ a 1)) (- 0 2))))) (not (<= (+ m (* (- 0 1) (+ a 1))) (- 0 1)))) (and (not (<= m 0)) (and (not (and (or (<= m 0) (and (<= 1 (+ (+ j 1) (* (- 0 1) m))) (<= (+ m (+ a 1)) (- 0 1)))) (not (and (and (not (<= m (+ a 1))) (and (not (<= (+ m (+ a 1)) (- 0 1))) (not (<= (+ m (+ a 1)) (- 0 2))))) (not (<= (+ m (* (- 0 1) (+ a 1))) (- 0 1))))))) (and (not (<= m 0)) (not (and (<= (+ m (* (- 0 1) (+ a 1))) (- 0 1)) (or (<= 1 (+ (+ j 1) (* (- 0 1) m))) (<= (+ m (* (- 0 1) (+ a 1))) (- 0 2))))))))) (not (and (<= (+ m (+ a 1)) (- 0 1)) (<= (+ m (+ a 1)) (- 0 2))))))))))))
(define-fun B () Bool  (or (or (and (and (= a 0) (> m 0)) (= j 1)) (and (or (and (and (and (and (and (= |a'| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= a (+ |a'| 1))) (and (and (and (and (and (= |a'@@0| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= a (- |a'@@0| 1)))) (= j (+ |j'| 1)))) (and (or (and (and (and (and (or (and (and (and (and (and (= |a'| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= |a'@@1| (+ |a'| 1))) (and (and (and (and (and (= |a'@@0| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= |a'@@1| (- |a'@@0| 1)))) (= |j'@@0| (+ |j'| 1))) (<= |j'@@0| m)) (<= |j'@@0| m)) (= a (+ |a'@@1| 1))) (and (and (and (and (or (and (and (and (and (and (= |a'| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= |a'@@2| (+ |a'| 1))) (and (and (and (and (and (= |a'@@0| 0) (> m 0)) (= |j'| 1)) (<= |j'| m)) (<= |j'| m)) (= |a'@@2| (- |a'@@0| 1)))) (= |j'@@0| (+ |j'| 1))) (<= |j'@@0| m)) (<= |j'@@0| m)) (= a (- |a'@@2| 1)))) (= j (+ |j'@@0| 1)))))
(assert (! A :interpolation-group g1))
(assert (! B :interpolation-group g2))
(check-sat)
(get-interpolant (g1))
(pop 1)

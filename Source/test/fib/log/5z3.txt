(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun j () Int)
(declare-fun i () Int)
(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun call0formal@u () Bool)
(declare-fun flag () Bool)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= (+ j (* (- 0 1) i)) (- 0 1))) u) u) (or (=> (not flag) (forall ((call0formal@u@@0 Bool) )  (not (<= (+ (+ j (+ y 1)) (* (- 0 1) (+ i (+ x 1)))) (- 0 1))))) (=> flag (forall ((call0formal@u@@1 Bool) )  (not (<= (+ (+ (+ j (+ y 1)) 1) (* (- 0 1) (+ i (+ x 1)))) (- 0 1)))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= (+ j (* (- 0 1) i)) (- 0 1))) (not u)) (not u)) (>= j i))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (and (= i 0) (= j 0)) (= x 0)) (= y 0)) (= u call0formal@u)) (not (<= (+ j (* (- 0 1) i)) (- 0 1))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (<= (+ j (* (- 0 1) i)) (- 0 1))) (not u)))
))
(check-sat)
(pop 1)

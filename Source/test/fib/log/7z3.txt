(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun i () Int)
(declare-fun n () Int)
(declare-fun a () Int)
(declare-fun b () Int)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (or (<= 1 (+ (* 3 i) (+ (* (- 0 1) a) (* (- 0 1) b)))) (<= (+ (* 3 n) (+ (* (- 0 1) a) (* (- 0 1) b))) (- 0 1)))) (< i n)) (< i n)) (forall ((call0formal@u Bool) )  (or (=> (not call0formal@u) (not (or (<= 1 (+ (* 3 (+ i 1)) (+ (* (- 0 1) (+ a 2)) (* (- 0 1) (+ b 1))))) (<= (+ (* 3 n) (+ (* (- 0 1) (+ a 2)) (* (- 0 1) (+ b 1)))) (- 0 1))))) (=> call0formal@u (not (or (<= 1 (+ (* 3 (+ i 1)) (+ (* (- 0 1) (+ a 1)) (* (- 0 1) (+ b 2))))) (<= (+ (* 3 n) (+ (* (- 0 1) (+ a 1)) (* (- 0 1) (+ b 2)))) (- 0 1))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (or (<= 1 (+ (* 3 i) (+ (* (- 0 1) a) (* (- 0 1) b)))) (<= (+ (* 3 n) (+ (* (- 0 1) a) (* (- 0 1) b))) (- 0 1)))) (not (< i n))) (<= n i)) (= (+ a b) (* 3 n)))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (>= n 0) (= i 0)) (= a 0)) (= b 0)) (not (or (<= 1 (+ (* 3 i) (+ (* (- 0 1) a) (* (- 0 1) b)))) (<= (+ (* 3 n) (+ (* (- 0 1) a) (* (- 0 1) b))) (- 0 1)))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (or (<= 1 (+ (* 3 i) (+ (* (- 0 1) a) (* (- 0 1) b)))) (<= (+ (* 3 n) (+ (* (- 0 1) a) (* (- 0 1) b))) (- 0 1)))) (not (< i n))))
))
(check-sat)
(pop 1)

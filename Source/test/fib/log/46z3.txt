(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun u () Bool)
(declare-fun x () Int)
(declare-fun w () Int)
(declare-fun z () Int)
(declare-fun y () Int)
(declare-fun call0formal@u () Bool)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= 2 x)) u) u) (or (=> (not (= (mod w 2) 1)) (or (=> (not (= (mod z 2) 0)) (forall ((call0formal@u@@0 Bool) )  (not (<= 2 x)))) (=> (= (mod z 2) 0) (forall ((call0formal@u@@1 Bool) )  (not (<= 2 x)))))) (=> (= (mod w 2) 1) (or (=> (not (= (mod z 2) 0)) (forall ((call0formal@u@@2 Bool) )  (not (<= 2 (+ x 1))))) (=> (= (mod z 2) 0) (forall ((call0formal@u@@3 Bool) )  (not (<= 2 (+ x 1)))))))))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (not (<= 2 x)) (not u)) (not u)) (<= x 1))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (and (and (and (and (= w 1) (= z 0)) (= x 0)) (= y 0)) (= u call0formal@u)) (not (<= 2 x)))
))
(check-sat)
(pop 1)
(push 1)
(set-info :boogie-vc-id |invariant inference check|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (not (and (not (<= 2 x)) (not u)))
))
(check-sat)
(pop 1)
